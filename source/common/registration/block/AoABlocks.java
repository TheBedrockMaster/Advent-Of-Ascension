package net.tslat.aoa3.common.registration.block;

import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.item.Rarity;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.grower.TreeGrower;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.material.MapColor;
import net.neoforged.neoforge.common.Tags;
import net.neoforged.neoforge.registries.DeferredBlock;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.tslat.aoa3.advent.AdventOfAscension;
import net.tslat.aoa3.common.registration.AoARegistries;
import net.tslat.aoa3.common.registration.block.group.*;
import net.tslat.aoa3.common.registration.item.AoAItems;
import net.tslat.aoa3.common.registration.worldgen.AoAWorldgenKeys;
import net.tslat.aoa3.content.block.CustomToolsBlock;
import net.tslat.aoa3.content.block.decoration.banner.BannerExtension;
import net.tslat.aoa3.content.block.decoration.misc.LunarPillarBlock;
import net.tslat.aoa3.content.block.decoration.misc.SpikeyPillarBlock;
import net.tslat.aoa3.content.block.decoration.misc.SteelPlateBlock;
import net.tslat.aoa3.content.block.functional.altar.*;
import net.tslat.aoa3.content.block.functional.fluid.Tar;
import net.tslat.aoa3.content.block.functional.fluid.ToxicWaste;
import net.tslat.aoa3.content.block.functional.light.LampBlock;
import net.tslat.aoa3.content.block.functional.light.VoxLight;
import net.tslat.aoa3.content.block.functional.misc.*;
import net.tslat.aoa3.content.block.functional.plant.*;
import net.tslat.aoa3.content.block.functional.portal.NetherPortalBlock;
import net.tslat.aoa3.content.block.functional.portal.*;
import net.tslat.aoa3.content.block.functional.utility.*;
import net.tslat.aoa3.content.block.generation.grass.AoAGrassBlock;
import net.tslat.aoa3.content.block.generation.grass.UpsideDownGrassBlock;
import net.tslat.aoa3.content.block.generation.grass.WaterGrassBlock;
import net.tslat.aoa3.content.block.generation.leaves.AoALeavesBlock;
import net.tslat.aoa3.content.block.generation.leaves.AoALeavesBlockOld;
import net.tslat.aoa3.content.block.generation.log.*;
import net.tslat.aoa3.content.block.generation.misc.*;
import net.tslat.aoa3.content.block.generation.plants.*;
import net.tslat.aoa3.content.block.generation.stone.DenseStone;
import net.tslat.aoa3.content.item.misc.CocoonItem;
import net.tslat.aoa3.library.object.TriFunction;
import net.tslat.aoa3.util.BlockUtil;
import net.tslat.aoa3.util.FluidUtil;

import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

@SuppressWarnings({"unused", "unchecked"})
public final class AoABlocks {
	private static final List<DeferredHolder<Block, ? extends LiquidBlock>> REGISTERED_LIQUIDS = new ObjectArrayList<>(2);

	public static void init() {}

	public static final StoneBlockGroup ABYSSAL_STONE = registerGroup("abyssal_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.NETHER));
	public static final StoneBlockGroup AROMATIC_STONE = registerGroup("aromatic_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_MAGENTA));
	public static final StoneBlockGroup BARON_STONE = registerGroup("baron_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_PURPLE));
	public static final StoneBlockGroup BRIGHT_ROCK = registerGroup("bright_rock", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_YELLOW));
	public static final StoneBlockGroup CORAL_ROCK = registerGroup("coral_rock", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_RED));
	public static final StoneBlockGroup CREEP_STONE = registerGroup("creep_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_GREEN));
	public static final StoneBlockGroup CRYSTALLISED_ROCK = registerGroup("crystallised_rock", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_PURPLE));
	public static final StoneBlockGroup DARKENED_ROCK = registerGroup("darkened_rock", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_BLACK));
	public static final StoneBlockGroup DENSE_STONE = registerGroup("dense_stone", StoneBlockGroup::new, registrar -> registrar.factory(DenseStone::new).baseStone().mapColour(MapColor.COLOR_LIGHT_GRAY));
	public static final StoneBlockGroup FUNGAL_ROCK = registerGroup("fungal_rock", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_BLUE));
	public static final StoneBlockGroup GRECKON_STONE = registerGroup("greckon_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_PURPLE));
	public static final StoneBlockGroup HELLSTONE = registerGroup("hellstone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.FIRE));
	public static final StoneBlockGroup IROSTONE = registerGroup("irostone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_GRAY));
	public static final StoneBlockGroup LELYETIAN_STONE = registerGroup("lelyetian_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.SAND));
	public static final StoneBlockGroup POLLUTED_STONE = registerGroup("polluted_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_GRAY));
	public static final StoneBlockGroup PRECASIAN_STONE = registerGroup("precasian_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_BROWN));
	public static final StoneBlockGroup PRESSED_CREEP_STONE = registerGroup("pressed_creep_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_LIGHT_GREEN));
	public static final StoneBlockGroup PRIMED_STONE = registerGroup("primed_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_GRAY));
	public static final StoneBlockGroup RUNIC_STONE = registerGroup("runic_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_BLUE));
	public static final StoneBlockGroup WEIGHTLESS_STONE = registerGroup("weightless_stone", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.TERRACOTTA_LIGHT_BLUE));

	public static final StoneBlockGroup PRECASIAN_COBBLESTONE = registerGroup("precasian_cobblestone", StoneBlockGroup::new, registrar -> registrar.baseCobblestone().mapColour(MapColor.COLOR_BROWN));
	public static final StoneBlockGroup SCORIA = registerGroup("scoria", StoneBlockGroup::new, registrar -> registrar.baseCobblestone().sounds(AoABlockSoundTypes.SCORIA).mapColour(MapColor.COLOR_BLACK));

	public static final DeferredBlock<Block> ARCHAIC_DIRT = register("archaic_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.DIRT).stats(1.5f, 4f));
	public static final DeferredBlock<Block> AROMATIC_DIRT = register("aromatic_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_MAGENTA));
	public static final DeferredBlock<Block> BLACKENED_SOIL = register("blackened_soil", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_GRAY));
	public static final DeferredBlock<Block> CANDIED_DIRT = register("candied_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_PINK));
	public static final DeferredBlock<Block> CELEVIAN_DIRT = register("celevian_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.WOOL));
	public static final DeferredBlock<Block> CORAL_SOIL = register("coral_soil", registrar -> registrar.baseDirt().mapColour(MapColor.TERRACOTTA_MAGENTA));
	public static final DeferredBlock<Block> CREEP_DIRT = register("creep_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.PLANT));
	public static final DeferredBlock<Block> FUNGAL_DIRT = register("fungal_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_MAGENTA));
	public static final DeferredBlock<Block> GRECKON_DIRT = register("greckon_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> LUNALYTE_DIRT = register("lunalyte_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_PINK));
	public static final DeferredBlock<Block> LUNASOLE_DIRT = register("lunasole_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.ICE));
	public static final DeferredBlock<Block> POLLUTED_SOIL = register("polluted_soil", registrar -> registrar.baseDirt().mapColour(MapColor.TERRACOTTA_CYAN));
	public static final DeferredBlock<Block> PRECASIAN_SOIL = register("precasian_soil", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_BROWN));
	public static final DeferredBlock<Block> WEIGHTLESS_DIRT = register("weightless_dirt", registrar -> registrar.baseDirt().mapColour(MapColor.COLOR_MAGENTA));

	public static final DeferredBlock<Block> BARON_SAND = register("baron_sand", registrar -> registrar.baseSand(0x71494A).mapColour(MapColor.CRIMSON_HYPHAE));
	public static final DeferredBlock<Block> BARON_LOOSE_SAND = register("baron_loose_sand", registrar -> registrar.baseSand(0x71494A).factory(BaronLooseSand::new).dynamicShape().coversScreen((state, level, pos) -> true).mapColour(MapColor.CRIMSON_HYPHAE));

	public static final DeferredBlock<Block> ABYSSAL_GRASS = register("abyssal_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.CRIMSON_HYPHAE).factory(properties -> new AoAGrassBlock(properties, ABYSSAL_STONE.stone)));
	public static final DeferredBlock<Block> AROMATIC_GRASS = register("aromatic_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_LIGHT_GREEN).factory(properties -> new AoAGrassBlock(properties, AROMATIC_DIRT)));
	public static final DeferredBlock<Block> BRIGHT_GRASS = register("bright_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.GOLD).factory(properties -> new AoAGrassBlock(properties, BRIGHT_ROCK.stone)));
	public static final DeferredBlock<Block> CANDIED_GRASS = register("candied_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.TERRACOTTA_PINK).factory(properties -> new AoAGrassBlock(properties, CANDIED_DIRT)));
	public static final DeferredBlock<Block> CELEVIAN_GRASS = register("celevian_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_RED).factory(properties -> new AoAGrassBlock(properties, CELEVIAN_DIRT)));
	public static final DeferredBlock<Block> CORAL_GRASS = register("coral_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.DIAMOND).factory(properties -> new WaterGrassBlock(properties, CORAL_SOIL, false)));
	public static final DeferredBlock<Block> CREEP_GRASS = register("creep_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.EMERALD).factory(properties -> new AoAGrassBlock(properties, CREEP_DIRT)));
	public static final DeferredBlock<Block> FADED_GRASS = register("faded_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_BLACK).factory(properties -> new AoAGrassBlock(properties, BLACKENED_SOIL)));
	public static final DeferredBlock<Block> FUNGAL_GRASS = register("fungal_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_CYAN).factory(properties -> new AoAGrassBlock(properties, FUNGAL_DIRT)));
	public static final DeferredBlock<Block> GRECKON_GRASS = register("greckon_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_PURPLE).factory(properties -> new AoAGrassBlock(properties, GRECKON_DIRT)));
	public static final DeferredBlock<Block> INVERTED_LELYETIAN_GRASS = register("inverted_lelyetian_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.SAND).factory(properties -> new UpsideDownGrassBlock(properties, LELYETIAN_STONE.stone, false)));
	public static final DeferredBlock<Block> IROGRASS = register("irograss", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.TERRACOTTA_YELLOW).factory(properties -> new AoAGrassBlock(properties, IROSTONE.stone)));
	public static final DeferredBlock<Block> LELYETIAN_GRASS = register("lelyetian_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_ORANGE).factory(properties -> new AoAGrassBlock(properties, LELYETIAN_STONE.stone)));
	public static final DeferredBlock<Block> LUNALYTE_GRASS = register("lunalyte_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_MAGENTA).factory(properties -> new AoAGrassBlock(properties, LUNALYTE_DIRT)));
	public static final DeferredBlock<Block> LUNASOLE_GRASS = register("lunasole_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.COLOR_BLUE).factory(properties -> new AoAGrassBlock(properties, LUNASOLE_DIRT)));
	public static final DeferredBlock<Block> POLLUTED_GRASS = register("polluted_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.TERRACOTTA_GREEN).factory(properties -> new AoAGrassBlock(properties, POLLUTED_SOIL)));
	public static final DeferredBlock<Block> PRECASIAN_GRASS = register("precasian_grass", registrar -> registrar.baseGrass().mapColour(MapColor.GRASS).factory(properties -> new AoAGrassBlock(properties, PRECASIAN_SOIL, AoAWorldgenKeys.Features.Placed.PRECASIAN_GRASS_BONEMEAL)));
	public static final DeferredBlock<Block> RUNIC_GRASS = register("runic_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.LAPIS).factory(properties -> new AoAGrassBlock(properties, RUNIC_STONE.stone)));
	public static final DeferredBlock<Block> WEIGHTLESS_GRASS = register("weightless_grass", registrar -> registrar.baseGrass().sounds(SoundType.NYLIUM).mapColour(MapColor.DIAMOND).factory(properties -> new AoAGrassBlock(properties, WEIGHTLESS_DIRT)));

	public static final DeferredBlock<Block> BARONYTE_ORE = register("baronyte_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_CYAN));
	public static final DeferredBlock<Block> BLAZIUM_ORE = register("blazium_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.FIRE));
	public static final DeferredBlock<Block> BLOODSTONE_ORE = register("bloodstone_ore", registrar -> registrar.baseOre(UniformInt.of(6, 11)).mapColour(MapColor.NETHER));
	public static final DeferredBlock<Block> CHARGED_RUNIUM_ORE = register("charged_runium_ore", registrar -> registrar.baseOre(UniformInt.of(4, 8)).mapColour(MapColor.COLOR_LIGHT_GRAY));
	public static final DeferredBlock<Block> CRYSTALLITE_ORE = register("crystallite_ore", registrar -> registrar.baseOre(UniformInt.of(6, 11)).mapColour(MapColor.TERRACOTTA_LIGHT_BLUE));
	public static final DeferredBlock<Block> ELECANIUM_ORE = register("elecanium_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.COLOR_BLUE));
	public static final DeferredBlock<Block> EMBERSTONE_ORE = register("emberstone_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).sounds(SoundType.NETHER_GOLD_ORE).mapColour(MapColor.NETHER));
	public static final DeferredBlock<Block> BONE_FRAGMENTS_ORE = register("bone_fragments_ore", registrar -> registrar.baseOre(UniformInt.of(4, 8)).mapColour(MapColor.TERRACOTTA_GREEN));
	public static final DeferredBlock<Block> DEEPSLATE_BONE_FRAGMENTS_ORE = register("deepslate_bone_fragments_ore", registrar -> registrar.baseOre(UniformInt.of(4, 8)).stats(4.5f, 3f).sounds(SoundType.DEEPSLATE).mapColour(MapColor.DEEPSLATE));
	public static final DeferredBlock<Block> PRECASIAN_IRON_ORE = register("precasian_iron_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> PRECASIAN_GOLD_ORE = register("precasian_gold_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> PRECASIAN_QUARTZ_ORE = register("precasian_quartz_ore", registrar -> registrar.baseOre(UniformInt.of(2, 5)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> PRECASIAN_REDSTONE_ORE = register("precasian_redstone_ore", registrar -> registrar.baseOre(UniformInt.of(1, 5)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> PRECASIAN_LAPIS_ORE = register("precasian_lapis_ore", registrar -> registrar.baseOre(UniformInt.of(2, 5)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> PRECASIAN_COPPER_ORE = register("precasian_copper_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> GEMENYTE_ORE = register("gemenyte_ore", registrar -> registrar.baseOre(UniformInt.of(4, 8)).mapColour(MapColor.TERRACOTTA_BROWN));
	public static final DeferredBlock<Block> BLUE_GEMSTONE_ORE = register("blue_gemstone_ore", registrar -> registrar.baseOre(UniformInt.of(4, 7)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> GREEN_GEMSTONE_ORE = register("green_gemstone_ore", registrar -> registrar.baseOre(UniformInt.of(4, 7)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> PURPLE_GEMSTONE_ORE = register("purple_gemstone_ore", registrar -> registrar.baseOre(UniformInt.of(4, 7)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> RED_GEMSTONE_ORE = register("red_gemstone_ore", registrar -> registrar.baseOre(UniformInt.of(4, 7)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> WHITE_GEMSTONE_ORE = register("white_gemstone_ore", registrar -> registrar.baseOre(UniformInt.of(4, 7)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> YELLOW_GEMSTONE_ORE = register("yellow_gemstone_ore", registrar -> registrar.baseOre(UniformInt.of(4, 7)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> GHASTLY_ORE = register("ghastly_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_PURPLE));
	public static final DeferredBlock<Block> GHOULISH_ORE = register("ghoulish_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_PURPLE));
	public static final DeferredBlock<Block> JADE_ORE = register("jade_ore", registrar -> registrar.baseOre(UniformInt.of(3, 8)).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> DEEPSLATE_JADE_ORE = register("deepslate_jade_ore", registrar -> registrar.baseOre(UniformInt.of(3, 8)).sounds(SoundType.DEEPSLATE).stats(4.5f, 3f).mapColour(MapColor.COLOR_PURPLE));
	public static final DeferredBlock<Block> JEWELYTE_ORE = register("jewelyte_ore", registrar -> registrar.baseOre(UniformInt.of(4, 8)).mapColour(MapColor.TERRACOTTA_LIGHT_GREEN));
	public static final DeferredBlock<Block> LIMONITE_ORE = register("limonite_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_GREEN));
	public static final DeferredBlock<Block> DEEPSLATE_LIMONITE_ORE = register("deepslate_limonite_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).sounds(SoundType.DEEPSLATE).stats(4.5f, 3f).mapColour(MapColor.TERRACOTTA_GREEN));
	public static final DeferredBlock<Block> LYON_ORE = register("lyon_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.COLOR_GRAY));
	public static final DeferredBlock<Block> MYSTITE_ORE = register("mystite_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_BLUE));
	public static final DeferredBlock<Block> ORNAMYTE_ORE = register("ornamyte_ore", registrar -> registrar.baseOre(UniformInt.of(4, 8)).mapColour(MapColor.COLOR_GRAY));
	public static final DeferredBlock<Block> RUNIUM_ORE = register("runium_ore", registrar -> registrar.baseOre(UniformInt.of(2, 6)).mapColour(MapColor.STONE));
	public static final DeferredBlock<Block> DEEPSLATE_RUNIUM_ORE = register("deepslate_runium_ore", registrar -> registrar.baseOre(UniformInt.of(2, 6)).sounds(SoundType.DEEPSLATE).stats(4.5f, 3f).mapColour(MapColor.STONE));
	public static final DeferredBlock<Block> NETHER_RUNIUM_ORE = register("nether_runium_ore", registrar -> registrar.baseOre(UniformInt.of(2, 6)).sounds(SoundType.NETHER_ORE).mapColour(MapColor.STONE));
	public static final DeferredBlock<Block> SHYREGEM_ORE = register("shyregem_ore", registrar -> registrar.baseOre(UniformInt.of(6, 13)).mapColour(MapColor.TERRACOTTA_YELLOW));
	public static final DeferredBlock<Block> SHYRESTONE_ORE = register("shyrestone_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_YELLOW));
	public static final DeferredBlock<Block> VARSIUM_ORE = register("varsium_ore", registrar -> registrar.baseOre(ConstantInt.of(0)).mapColour(MapColor.TERRACOTTA_CYAN));

	public static final CompleteBrickBlockGroup PRECASIAN_STONE_BRICKS = registerGroup("precasian_stone_brick", CompleteBrickBlockGroup::new, registrar -> registrar.baseBricks().sounds(SoundType.STONE).mapColour(MapColor.COLOR_BROWN).stats(1.5f, 6));
	public static final CompleteBrickBlockGroup BARON_STONE_BRICKS = registerGroup("baron_stone_brick", CompleteBrickBlockGroup::new, registrar -> registrar.baseBricks().sounds(SoundType.STONE).mapColour(MapColor.TERRACOTTA_ORANGE).stats(10f, 15f));
	public static final BrickBlockGroup HELLSTONE_BRICKS = registerGroup("hellstone_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().sounds(SoundType.STONE).mapColour(MapColor.COLOR_RED).stats(8, 12f));
	public static final DeferredBlock<Block> CRACKED_HELLSTONE_BRICKS = register("cracked_hellstone_bricks", registrar -> registrar.baseBricks().sounds(SoundType.STONE).mapColour(MapColor.COLOR_RED).stats(8, 12f));

	public static final StoneBlockGroup ARCHAIC_TILE = registerGroup("archaic_tile", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_RED).stats(2f, 10f));
	public static final StoneBlockGroup ARCHAIC_TILE_NODE = registerGroup("archaic_tile_node", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_RED).stats(2f, 10f));
	public static final StoneBlockGroup ARCHAIC_TILE_SMALL = registerGroup("archaic_tile_small", StoneBlockGroup::new, registrar -> registrar.baseStone().mapColour(MapColor.COLOR_RED).stats(2f, 10f));
	public static final StoneBlockGroup ARCHAIC_TILE_STREAM = registerGroup("archaic_tile_stream", StoneBlockGroup::new, registrar -> registrar.baseStone().factory(RotatedPillarBlock::new).mapColour(MapColor.COLOR_RED).stats(2f, 10f));
	public static final BrickBlockGroup BARON_TILES = registerGroup("baron_tile", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.TERRACOTTA_ORANGE).stats(10f, 15f));
	public static final BrickBlockGroup BLOODSTONE_BRICKS = registerGroup("bloodstone_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_RED).stats(10f, 15f));
	public static final BrickBlockGroup CORAL_BRICKS = registerGroup("coral_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_CYAN).stats(10f, 15f));
	public static final BrickBlockGroup CREEPONIA_BRICKS = registerGroup("creeponia_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.EMERALD).stats(10f, 15f));
	public static final BrickBlockGroup CRYSTALLITE_BRICKS = registerGroup("crystallite_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.TERRACOTTA_YELLOW).stats(10f, 15f));
	public static final BrickBlockGroup CRYSTEVIA_BRICKS = registerGroup("crystevia_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_PURPLE).stats(10f, 15f));
	public static final BrickBlockGroup DARKWASH_BRICKS = registerGroup("darkwash_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_BLACK).stats(50f, 2000f));
	public static final BrickBlockGroup DARK_BRICKS = registerGroup("dark_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_BLACK).stats(10f, 15f));
	public static final BrickBlockGroup GARDENCIA_BRICKS = registerGroup("gardencia_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.EMERALD).stats(10f, 15f));
	public static final BrickBlockGroup GRECKON_BRICKS = registerGroup("greckon_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_PURPLE).stats(10f, 15f));
	public static final BrickBlockGroup HAUNTED_BRICKS = registerGroup("haunted_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_PURPLE).stats(10f, 15f));
	public static final BrickBlockGroup IRO_DOTTED_BRICKS = registerGroup("iro_dotted_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.TERRACOTTA_YELLOW).stats(10f, 15f));
	public static final BrickBlockGroup IRO_STRIPED_BRICKS = registerGroup("iro_striped_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.TERRACOTTA_YELLOW).stats(10f, 15f));
	public static final BrickBlockGroup LELYETIAN_BRICKS = registerGroup("lelyetian_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.FIRE).stats(10f, 15f));
	public static final BrickBlockGroup LUNAR_BRICKS = registerGroup("lunar_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_PINK).stats(10f, 15f));
	public static final BrickBlockGroup BLACK_MYSTERIUM_BRICKS = registerGroup("black_mysterium_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_GRAY).stats(10f, 15f));
	public static final BrickBlockGroup GREEN_MYSTERIUM_BRICKS = registerGroup("green_mysterium_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.PLANT).stats(10f, 15f));
	public static final BrickBlockGroup ROSIDIAN_BRICKS = registerGroup("rosidian_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.COLOR_PURPLE).stats(10f, 15f));
	public static final BrickBlockGroup RUNIC_STONE_BRICKS = registerGroup("runic_stone_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.GOLD).stats(10f, 15f));
	public static final BrickBlockGroup CHISELED_RUNIC_STONE_BRICKS = registerGroup("chiseled_runic_stone_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.WATER).stats(10f, 15f));
	public static final BrickBlockGroup WHITE_SHYRE_BRICKS = registerGroup("white_shyre_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.METAL).stats(10f, 15f));
	public static final BrickBlockGroup YELLOW_SHYRE_BRICKS = registerGroup("yellow_shyre_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.TERRACOTTA_YELLOW).stats(10f, 15f));
	public static final BrickBlockGroup SKELETAL_BRICKS = registerGroup("skeletal_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.TERRACOTTA_LIGHT_GREEN).stats(10f, 15f));
	public static final BrickBlockGroup WHITEWASH_BRICKS = registerGroup("whitewash_brick", BrickBlockGroup::new, registrar -> registrar.baseBricks().mapColour(MapColor.QUARTZ).stats(50f, 2000f));
	public static final StoneBlockGroup INTRICATE_AMETHYST_IVORY = registerGroup("intricate_amethyst_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup INTRICATE_IVORY = registerGroup("intricate_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.QUARTZ).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup INTRICATE_JADE_IVORY = registerGroup("intricate_jade_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup INTRICATE_LIMONITE_IVORY = registerGroup("intricate_limonite_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup INTRICATE_REDSTONE_IVORY = registerGroup("intricate_redstone_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_RED).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup INTRICATE_LAPIS_IVORY = registerGroup("intricate_lapis_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup NATURAL_AMETHYST_IVORY = registerGroup("natural_amethyst_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup NATURAL_IVORY = registerGroup("natural_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.QUARTZ).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup NATURAL_JADE_IVORY = registerGroup("natural_jade_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup NATURAL_LIMONITE_IVORY = registerGroup("natural_limonite_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup NATURAL_REDSTONE_IVORY = registerGroup("natural_redstone_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_RED).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup NATURAL_LAPIS_IVORY = registerGroup("natural_lapis_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup ORNATE_AMETHYST_IVORY = registerGroup("ornate_amethyst_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup ORNATE_IVORY = registerGroup("ornate_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.QUARTZ).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup ORNATE_JADE_IVORY = registerGroup("ornate_jade_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup ORNATE_LIMONITE_IVORY = registerGroup("ornate_limonite_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup ORNATE_REDSTONE_IVORY = registerGroup("ornate_redstone_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_RED).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup ORNATE_LAPIS_IVORY = registerGroup("ornate_lapis_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup PATTERNED_AMETHYST_IVORY = registerGroup("patterned_amethyst_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup PATTERNED_IVORY = registerGroup("patterned_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.QUARTZ).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup PATTERNED_JADE_IVORY = registerGroup("patterned_jade_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup PATTERNED_LIMONITE_IVORY = registerGroup("patterned_limonite_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_GREEN).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup PATTERNED_REDSTONE_IVORY = registerGroup("patterned_redstone_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.TERRACOTTA_RED).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());
	public static final StoneBlockGroup PATTERNED_LAPIS_IVORY = registerGroup("patterned_lapis_ivory", StoneBlockGroup::new, registrar -> registrar.needsTool().mapColour(MapColor.COLOR_LIGHT_BLUE).stats(5f, 5f).instrument(NoteBlockInstrument.XYLOPHONE).decorationBlocksTab());

	public static final PottablePlantBlockGroup ACHONY_SAPLING = registerGroup("achony_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("achony").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.ACHONY_TREE)*/, properties)));
	public static final PottablePlantBlockGroup BAOBAB_SAPLING = registerGroup("baobab_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("baobab").toString(), Optional.of(AoAWorldgenKeys.Features.Configured.BAOBAB_TREE), Optional.empty(), Optional.empty()), properties)));
	public static final PottablePlantBlockGroup BLOODTWISTER_SAPLING = registerGroup("bloodtwister_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("bloodtwister").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.BLOODTWISTER_TREE)*/, properties)));
	public static final PottablePlantBlockGroup BLUE_CELEVUS_SAPLING = registerGroup("blue_celevus_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("blue_celevus").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.BLUE_CELEVUS_TREE)*/, properties)));
	public static final PottablePlantBlockGroup GREEN_CELEVUS_SAPLING = registerGroup("green_celevus_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("green_celevus").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.GREEN_CELEVUS_TREE)*/, properties)));
	public static final PottablePlantBlockGroup PURPLE_CELEVUS_SAPLING = registerGroup("purple_celevus_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("purple_celevus").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.PURPLE_CELEVUS_TREE)*/, properties)));
	public static final PottablePlantBlockGroup RED_CELEVUS_SAPLING = registerGroup("red_celevus_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("red_celevus").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.RED_CELEVUS_TREE)*/, properties)));
	public static final PottablePlantBlockGroup YELLOW_CELEVUS_SAPLING = registerGroup("yellow_celevus_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("yellow_celevus").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.YELLOW_CELEVUS_TREE)*/, properties)));
	public static final PottablePlantBlockGroup CHURRY_SAPLING = registerGroup("churry_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("churry").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.CHURRY_TREE)*/, properties)));
	public static final PottablePlantBlockGroup CREEP_SAPLING = registerGroup("creep_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("creep").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.CREEP_TREE)*/, properties)));
	public static final PottablePlantBlockGroup DAWNWOOD_SAPLING = registerGroup("dawnwood_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("dawnwood").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.DAWNWOOD_TREE)*/, properties)));
	public static final PottablePlantBlockGroup EYEBUSH_SAPLING = registerGroup("eyebush_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("eyebush").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.EYEBUSH_TREE)*/, properties)));
	public static final PottablePlantBlockGroup EYE_HANGER_SAPLING = registerGroup("eye_hanger_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("eye_hanger").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.EYE_HANGER_TREE)*/, properties)));
	public static final PottablePlantBlockGroup HAUNTED_SAPLING = registerGroup("haunted_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("haunted").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.HAUNTED_TREE)*/, properties)));
	public static final PottablePlantBlockGroup BLUE_HAVEN_SAPLING = registerGroup("blue_haven_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("blue_haven").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.BLUE_HAVEN_TREE)*/, properties)));
	public static final PottablePlantBlockGroup PINK_HAVEN_SAPLING = registerGroup("pink_haven_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("pink_haven").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.PINK_HAVEN_TREE)*/, properties)));
	public static final PottablePlantBlockGroup PURPLE_HAVEN_SAPLING = registerGroup("purple_haven_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("purple_haven").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.PURPLE_HAVEN_TREE)*/, properties)));
	public static final PottablePlantBlockGroup RED_HAVEN_SAPLING = registerGroup("red_haven_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("red_haven").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.RED_HAVEN_TREE)*/, properties)));
	public static final PottablePlantBlockGroup TURQUOISE_HAVEN_SAPLING = registerGroup("turquoise_haven_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("turquoise_haven").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.TURQUOISE_HAVEN_TREE)*/, properties)));
	public static final PottablePlantBlockGroup YELLOW_HAVEN_SAPLING = registerGroup("yellow_haven_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("yellow_haven").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.YELLOW_HAVEN_TREE)*/, properties)));
	public static final PottablePlantBlockGroup IRODUST_SAPLING = registerGroup("irodust_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("irodust").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.IRODUST_TREE)*/, properties)));
	public static final PottablePlantBlockGroup IROGOLD_SAPLING = registerGroup("irogold_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("irogold").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.IROGOLD_TREE)*/, properties)));
	public static final PottablePlantBlockGroup LUCALUS_SAPLING = registerGroup("lucalus_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("lucalus").toString(), Optional.empty(), Optional.of(AoAWorldgenKeys.Features.Configured.LUCALUS_TREE), Optional.empty()), properties)));
	public static final PottablePlantBlockGroup LUNICIA_SAPLING = registerGroup("lunicia_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("lunicia").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.LUNICIA_TREE)*/, properties)));
	public static final PottablePlantBlockGroup LUNOSSO_SAPLING = registerGroup("lunosso_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("lunosso").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.LUNOSSO_TREE)*/, properties)));
	public static final PottablePlantBlockGroup RUNIC_SAPLING = registerGroup("runic_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("runic").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.RUNIC_TREE)*/, properties)));
	public static final PottablePlantBlockGroup SHADOW_SAPLING = registerGroup("shadow_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new DarkGrowingSapling(new TreeGrower(AdventOfAscension.id("shadow").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.SHADOW_TREE)*/, properties)));
	public static final PottablePlantBlockGroup BRIGHT_SHYRE_SAPLING = registerGroup("bright_shyre_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("bright_shyre").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.BRIGHT_SHYRE_TREE)*/, properties)));
	public static final PottablePlantBlockGroup SHYRE_SAPLING = registerGroup("shyre_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("shyre").toString(), Optional.empty(), Optional.empty(), Optional.empty())/*new AoATreeOld(AoAFeatures.NORMAL_SHYRE_TREE)*/, properties)));
	public static final PottablePlantBlockGroup STRANGLEWOOD_SAPLING = registerGroup("stranglewood_sapling", PottablePlantBlockGroup::new, registrar -> registrar.baseSapling().factory(properties -> new AoASaplingBlock(new TreeGrower(AdventOfAscension.id("stranglewood").toString(), Optional.of(AoAWorldgenKeys.Features.Configured.STRANGLEWOOD_TREE), Optional.of(AoAWorldgenKeys.Features.Configured.SPINDLY_STRANGLEWOOD_TREE), Optional.empty()), properties)));

	public static final DeferredBlock<Block> ACHONY_LEAVES = register("achony_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 58f)));
	public static final DeferredBlock<Block> BAOBAB_LEAVES = register("baobab_leaves", registrar -> registrar.baseLeaves().factory(AoALeavesBlock::new));
	public static final DeferredBlock<Block> BLOOD_LEAVES = register("blood_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 30f)));
	public static final DeferredBlock<Block> BLUE_CELEVUS_LEAVES = register("blue_celevus_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 36f)));
	public static final DeferredBlock<Block> GREEN_CELEVUS_LEAVES = register("green_celevus_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 36f)));
	public static final DeferredBlock<Block> PURPLE_CELEVUS_LEAVES = register("purple_celevus_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 36f)));
	public static final DeferredBlock<Block> RED_CELEVUS_LEAVES = register("red_celevus_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 36f)));
	public static final DeferredBlock<Block> WHITE_CELEVUS_LEAVES = register("white_celevus_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 36f)));
	public static final DeferredBlock<Block> YELLOW_CELEVUS_LEAVES = register("yellow_celevus_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 36f)));
	public static final DeferredBlock<Block> CHURRY_LEAVES = register("churry_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 66f)));
	public static final DeferredBlock<Block> CREEP_LEAVES = register("creep_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 17f)));
	public static final DeferredBlock<Block> DAWN_LEAVES = register("dawn_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 15f)));
	public static final DeferredBlock<Block> HAUNTED_LEAVES = register("haunted_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 60f)));
	public static final DeferredBlock<Block> HAUNTED_EYES_LEAVES = register("haunted_eyes_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 60f)));
	public static final DeferredBlock<Block> BLUE_HAVEN_LEAVES = register("blue_haven_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 38f)));
	public static final DeferredBlock<Block> PINK_HAVEN_LEAVES = register("pink_haven_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 38f)));
	public static final DeferredBlock<Block> PURPLE_HAVEN_LEAVES = register("purple_haven_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 38f)));
	public static final DeferredBlock<Block> RED_HAVEN_LEAVES = register("red_haven_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 38f)));
	public static final DeferredBlock<Block> TURQUOISE_HAVEN_LEAVES = register("turquoise_haven_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 38f)));
	public static final DeferredBlock<Block> YELLOW_HAVEN_LEAVES = register("yellow_haven_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 38f)));
	public static final DeferredBlock<Block> IRODUST_LEAVES = register("irodust_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 19f)));
	public static final DeferredBlock<Block> IROGOLD_LEAVES = register("irogold_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 9f)));
	public static final DeferredBlock<Block> LELYETIAN_LEAVES = register("lelyetian_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 0)));
	public static final DeferredBlock<Block> LUCALUS_LEAVES = register("lucalus_leaves", registrar -> registrar.baseLeaves().factory(AoALeavesBlock::new));
	public static final DeferredBlock<Block> LUNICIA_LEAVES = register("lunicia_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 14f)));
	public static final DeferredBlock<Block> LUNOSSO_LEAVES = register("lunosso_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 8f)));
	public static final DeferredBlock<Block> RUNIC_LEAVES = register("runic_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 8f)));
	public static final DeferredBlock<Block> SHADOWBLOOD_LEAVES = register("shadowblood_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 21f)));
	public static final DeferredBlock<Block> SHADOW_LEAVES = register("shadow_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 27f)));
	public static final DeferredBlock<Block> BRIGHT_SHYRE_LEAVES = register("bright_shyre_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 7f)));
	public static final DeferredBlock<Block> SHYRE_LEAVES = register("shyre_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 7f)));
	public static final DeferredBlock<Block> STRANGLEWOOD_LEAVES = register("stranglewood_leaves", registrar -> registrar.baseLeaves().factory(AoALeavesBlock::new));
	public static final DeferredBlock<Block> VEIN_LEAVES = register("vein_leaves", registrar -> registrar.baseLeaves().factory(properties -> new AoALeavesBlockOld(properties, 1 / 30f)));

	public static final LogBlockGroup ACHONY_LOG = registerGroup("achony", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup BAOBAB_LOG = registerGroup("baobab", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup BLOOD_LOG = registerGroup("blood", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup CHURRY_LOG = registerGroup("churry", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup CREEP_LOG = registerGroup("creep", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup DAWN_LOG = registerGroup("dawn", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup EYEBALL_LOG = registerGroup("eyeball", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup HAUNTED_LOG = registerGroup("haunted", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup HAUNTED_EYE_LOG = registerGroup("haunted_eye", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup HAUNTED_EYES_LOG = registerGroup("haunted_eyes", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup HAUNTED_FLASHING_LOG = registerGroup("haunted_flashing", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup HAUNTED_PURPLING_LOG = registerGroup("haunted_purpling", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup IROLOG = registerGroup("iro", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup LUCALUS_LOG = registerGroup("lucalus", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup LUNIDE_LOG = registerGroup("lunide", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup RUNIC_LOG = registerGroup("runic", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup SHADOW_LOG = registerGroup("shadow", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final LogBlockGroup SHYRE_LOG = registerGroup("shyre", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final DeferredBlock<StranglewoodLog> STRANGLEWOOD_LOG = register("stranglewood_log", StranglewoodLog::build);
	public static final DeferredBlock<StranglewoodBark> STRANGLEWOOD = register("stranglewood", StranglewoodBark::build);
	public static final DeferredBlock<LogBlock> STRIPPED_STRANGLEWOOD_LOG = register("stripped_stranglewood_log", registrar -> registrar.basedOn(STRANGLEWOOD_LOG).mapColour(MapColor.COLOR_BROWN).factory(properties -> new LogBlock(properties, null)).generationBlocksTab());
	public static final DeferredBlock<LogBlock> STRIPPED_STRANGLEWOOD = register("stripped_stranglewood", registrar -> registrar.basedOn(STRANGLEWOOD_LOG).mapColour(MapColor.COLOR_BROWN).factory(properties -> new LogBlock(properties, null)).generationBlocksTab());
	public static final LogBlockGroup TOXIC_LOG = registerGroup("toxic", (id, registry, registrar) -> new LogBlockGroup(id, registry, MapColor.COLOR_BROWN, MapColor.TERRACOTTA_BROWN, (registrar2, strippedLog, endColour, sideColour) -> registrar2.baseLog(endColour, sideColour, strippedLog)), registrar -> {});
	public static final DeferredBlock<RotatedPillarBlock> DEAD_LOG = register("dead_log", registrar -> registrar.basedOn(Blocks.OAK_LOG).factory(DeadLogBlock::new).generationBlocksTab());
	public static final DeferredBlock<RotatedPillarBlock> DEAD_WOOD = register("dead_wood", registrar -> registrar.basedOn(DEAD_LOG).factory(DeadLogBlock::new).mapColour(MapColor.WOOD).generationBlocksTab());

	public static final PlanksBlockGroup ACHONY_PLANKS = registerGroup("achony", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.ACHONY_SET.woodType(), AoABlockSets.ACHONY_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup BAOBAB_PLANKS = registerGroup("baobab", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, true, factory, baseRegistrar, AoABlockSets.BAOBAB_SET.woodType(), AoABlockSets.BAOBAB_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup BLOODWOOD_PLANKS = registerGroup("bloodwood", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.BLOODWOOD_SET.woodType(), AoABlockSets.BLOODWOOD_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup CHURRY_PLANKS = registerGroup("churry", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.CHURRY_SET.woodType(), AoABlockSets.CHURRY_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup CREEP_PLANKS = registerGroup("creep", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.CREEP_SET.woodType(), AoABlockSets.CREEP_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup DAWNWOOD_PLANKS = registerGroup("dawnwood", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.DAWNWOOD_SET.woodType(), AoABlockSets.DAWNWOOD_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup HAUNTEDWOOD_PLANKS = registerGroup("hauntedwood", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.HAUNTEDWOOD_SET.woodType(), AoABlockSets.HAUNTEDWOOD_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup IROWOOD_PLANKS = registerGroup("irowood", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.IROWOOD_SET.woodType(), AoABlockSets.IROWOOD_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup LUCALUS_PLANKS = registerGroup("lucalus", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, true, factory, baseRegistrar, AoABlockSets.LUCALUS_SET.woodType(), AoABlockSets.LUCALUS_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup LUNIDE_PLANKS = registerGroup("lunide", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.LUNIDE_SET.woodType(), AoABlockSets.LUNIDE_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup RUNIC_PLANKS = registerGroup("runic", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.RUNIC_SET.woodType(), AoABlockSets.RUNIC_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup SHADOW_PLANKS = registerGroup("shadow", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.SHADOW_SET.woodType(), AoABlockSets.SHADOW_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup SHYRE_PLANKS = registerGroup("shyre", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.SHYRE_SET.woodType(), AoABlockSets.SHYRE_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup STRANGLEWOOD_PLANKS = registerGroup("stranglewood", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, true, factory, baseRegistrar, AoABlockSets.STRANGLEWOOD_SET.woodType(), AoABlockSets.STRANGLEWOOD_SET.blockSetType()), BlockRegistrar::basePlanks);
	public static final PlanksBlockGroup TOXICWOOD_PLANKS = registerGroup("toxicwood", (id, factory, baseRegistrar) -> new PlanksBlockGroup(id, false, factory, baseRegistrar, AoABlockSets.TOXICWOOD_SET.woodType(), AoABlockSets.TOXICWOOD_SET.blockSetType()), BlockRegistrar::basePlanks);

	public static final SignBlockGroup BAOBAB_SIGN = registerGroup("baobab", (id, factory, baseRegistrar) -> new SignBlockGroup(id, factory, baseRegistrar, AoABlockSets.BAOBAB_SET.woodType()), registrar -> registrar.baseSign(BAOBAB_PLANKS.planks, false).factory(properties -> new StandingSignBlock(AoABlockSets.BAOBAB_SET.woodType(), properties)));
	public static final SignBlockGroup STRANGLEWOOD_SIGN = registerGroup("stranglewood", (id, factory, baseRegistrar) -> new SignBlockGroup(id, factory, baseRegistrar, AoABlockSets.STRANGLEWOOD_SET.woodType()), registrar -> registrar.baseSign(STRANGLEWOOD_PLANKS.planks, false).factory(properties -> new StandingSignBlock(AoABlockSets.STRANGLEWOOD_SET.woodType(), properties)));
	public static final SignBlockGroup LUCALUS_SIGN = registerGroup("lucalus", (id, factory, baseRegistrar) -> new SignBlockGroup(id, factory, baseRegistrar, AoABlockSets.LUCALUS_SET.woodType()), registrar -> registrar.baseSign(LUCALUS_PLANKS.planks, false).factory(properties -> new StandingSignBlock(AoABlockSets.LUCALUS_SET.woodType(), properties)));

	public static final DeferredBlock<Block> ARCHAIC_LIGHT = register("archaic_light", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().noRedstone().instrument(NoteBlockInstrument.PLING).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> CREEP_CRYSTAL = register("creep_crystal", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().noRedstone().instrument(NoteBlockInstrument.PLING).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> DARKSTONE = register("darkstone", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().noRedstone().instrument(NoteBlockInstrument.PLING).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> DEEP_CRYSTAL = register("deep_crystal", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().noRedstone().instrument(NoteBlockInstrument.PLING).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> HIVE_LIGHT = register("hive_light", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().noRedstone().instrument(NoteBlockInstrument.PLING).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> STEEL_LIGHT = register("steel_light", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().instrument(NoteBlockInstrument.IRON_XYLOPHONE).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> TWINKLESTONE = register("twinklestone", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(0.5f, 0.3f).light(15).decorationBlocksTab().noRedstone().instrument(NoteBlockInstrument.PLING).sounds(SoundType.GLASS));
	public static final DeferredBlock<Block> VOX_LIGHT = register("vox_light", registrar -> registrar.mapColour(MapColor.TERRACOTTA_GREEN).stats(0.6f, 1.2f).light(8).decorationBlocksTab().instrument(NoteBlockInstrument.IRON_XYLOPHONE).sounds(SoundType.GLASS).factory(VoxLight::new));

	public static final DeferredBlock<Block> AMETHYST_LAMP = register("amethyst_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> AQUATIC_LAMP = register("aquatic_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> BARONYTE_LAMP = register("baronyte_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> BLAZIUM_LAMP = register("blazium_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> BLOODSTONE_LAMP = register("bloodstone_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> CRYSTALLITE_LAMP = register("crystallite_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> ELECANIUM_LAMP = register("elecanium_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> EMBERSTONE_LAMP = register("emberstone_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> FIRE_LAMP = register("fire_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> GHASTLY_LAMP = register("ghastly_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> GHOULISH_LAMP = register("ghoulish_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IRO_LAMP = register("iro_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IVORY_LAMP = register("ivory_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IVORY_AMETHYST_LAMP = register("ivory_amethyst_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IVORY_JADE_LAMP = register("ivory_jade_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IVORY_LIMONITE_LAMP = register("ivory_limonite_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IVORY_REDSTONE_LAMP = register("ivory_redstone_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> IVORY_LAPIS_LAMP = register("ivory_lapis_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> JADE_LAMP = register("jade_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> AQUA_STAINED_GLASS_LAMP = register("aqua_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> BLACK_STAINED_GLASS_LAMP = register("black_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> BLUE_STAINED_GLASS_LAMP = register("blue_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> BROWN_STAINED_GLASS_LAMP = register("brown_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> CYAN_STAINED_GLASS_LAMP = register("cyan_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> DARK_GREY_STAINED_GLASS_LAMP = register("dark_grey_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> GREEN_STAINED_GLASS_LAMP = register("green_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> GREY_STAINED_GLASS_LAMP = register("grey_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> LIME_STAINED_GLASS_LAMP = register("lime_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> MAGENTA_STAINED_GLASS_LAMP = register("magenta_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> ORANGE_STAINED_GLASS_LAMP = register("orange_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> PINK_STAINED_GLASS_LAMP = register("pink_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> PURPLE_STAINED_GLASS_LAMP = register("purple_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> RED_STAINED_GLASS_LAMP = register("red_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> WHITE_STAINED_GLASS_LAMP = register("white_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> YELLOW_STAINED_GLASS_LAMP = register("yellow_stained_glass_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> LIMONITE_LAMP = register("limonite_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> LUNAR_LAMP = register("lunar_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> LYON_LAMP = register("lyon_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> MYSTIC_LAMP = register("mystic_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> NEON_LAMP = register("neon_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> NEON_LAPIS_LAMP = register("neon_lapis_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> LAPIS_LAMP = register("lapis_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());
	public static final DeferredBlock<Block> SKELETAL_LAMP = register("skeletal_lamp", registrar -> registrar.factory(LampBlock::new).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 15 : 0).sounds(SoundType.GLASS).decorationBlocksTab());

	public static final DeferredBlock<Block> ABYSSAL_GLASS = register("abyssal_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> AQUATIC_GLASS = register("aquatic_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> ARCHAIC_GLASS = register("archaic_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> BARON_GLASS = register("baron_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> CAE_GLASS = register("cae_glass", registrar -> registrar.baseGlass().stats(20, 300));
	public static final DeferredBlock<Block> DECAYED_GLASS = register("decayed_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> GARDENCIAN_GLASS = register("gardencian_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> HAVEN_GLASS = register("haven_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> IRO_GLASS = register("iro_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> LELYETIAN_GLASS = register("lelyetian_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> LUNAR_GLASS = register("lunar_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> RUNIC_GLASS = register("runic_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> SHYRE_GLASS = register("shyre_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> VOX_GLASS = register("vox_glass", BlockRegistrar::baseGlass);
	public static final DeferredBlock<Block> ZHINX_GLASS = register("zhinx_glass", BlockRegistrar::baseGlass);

	public static final DeferredBlock<Block> TWINKLESTONE_FENCE = register("twinklestone_fence", registrar -> registrar.baseFence(TWINKLESTONE));

	public static final DeferredBlock<Block> TWINKLESTONE_FENCE_GATE = register("twinklestone_fence_gate", registrar -> registrar.decorationBlocksTab().instrument(NoteBlockInstrument.PLING).stats(0.5f, 0.3f).sounds(SoundType.GLASS).light(15).alwaysSolid().mapColour(DyeColor.MAGENTA).factory(properties -> new FenceGateBlock(properties, SoundEvents.FENCE_GATE_OPEN, SoundEvents.FENCE_GATE_CLOSE)));

	public static final DeferredBlock<Block> BARONYTE_BLOCK = register("baronyte_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.FIRE).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> BLAZIUM_BLOCK = register("blazium_block", registrar -> registrar.baseMineralBlock().mapColour(DyeColor.ORANGE).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> BLOODSTONE_BLOCK = register("bloodstone_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.FIRE));
	public static final DeferredBlock<Block> CRYSTALLITE_BLOCK = register("crystallite_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.GOLD));
	public static final DeferredBlock<Block> ELECANIUM_BLOCK = register("elecanium_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.DIAMOND).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> EMBERSTONE_BLOCK = register("emberstone_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> GEMENYTE_BLOCK = register("gemenyte_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.EMERALD));
	public static final DeferredBlock<Block> GHASTLY_INGOT_BLOCK = register("ghastly_ingot_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.SAND).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> GHOULISH_INGOT_BLOCK = register("ghoulish_ingot_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.COLOR_MAGENTA).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> JADE_BLOCK = register("jade_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.EMERALD));
	public static final DeferredBlock<Block> JEWELYTE_BLOCK = register("jewelyte_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.EMERALD));
	public static final DeferredBlock<Block> LIMONITE_BLOCK = register("limonite_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> LUNAR_BLOCK = register("lunar_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.COLOR_PINK).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> LYON_BLOCK = register("lyon_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> MYSTITE_BLOCK = register("mystite_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.COLOR_LIGHT_GREEN).instrument(NoteBlockInstrument.IRON_XYLOPHONE));
	public static final DeferredBlock<Block> ORNAMYTE_BLOCK = register("ornamyte_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.METAL));
	public static final DeferredBlock<Block> SHYREGEM_BLOCK = register("shyregem_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.DIAMOND));
	public static final DeferredBlock<Block> SHYRESTONE_BLOCK = register("shyrestone_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.DIAMOND).instrument(NoteBlockInstrument.BELL));
	public static final DeferredBlock<Block> SKELETAL_INGOT_BLOCK = register("skeletal_ingot_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.SAND));
	public static final DeferredBlock<Block> VARSIUM_BLOCK = register("varsium_block", registrar -> registrar.baseMineralBlock().mapColour(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.IRON_XYLOPHONE));

	public static final DeferredBlock<Block> RAW_LIMONITE_BLOCK = register("raw_limonite_block", registrar -> registrar.baseRawOreBlock().mapColour(MapColor.COLOR_ORANGE));
	public static final DeferredBlock<Block> RAW_EMBERSTONE_BLOCK = register("raw_emberstone_block", registrar -> registrar.baseRawOreBlock().mapColour(MapColor.TERRACOTTA_BROWN));

	public static final DeferredBlock<Block> BARON_CARPET = register("baron_carpet", registrar -> registrar.baseCarpet().mapColour(DyeColor.RED).factory(properties -> new WoolCarpetBlock(DyeColor.RED, properties)));
	public static final DeferredBlock<Block> BOREAN_CARPET = register("borean_carpet", registrar -> registrar.baseCarpet().mapColour(DyeColor.CYAN).factory(properties -> new WoolCarpetBlock(DyeColor.CYAN, properties)));
	public static final DeferredBlock<Block> GARDENCIAN_CARPET = register("gardencian_carpet", registrar -> registrar.baseCarpet().mapColour(DyeColor.GREEN).factory(properties -> new WoolCarpetBlock(DyeColor.GREEN, properties)));
	public static final DeferredBlock<Block> IRO_CARPET = register("iro_carpet", registrar -> registrar.baseCarpet().mapColour(DyeColor.BLACK).factory(properties -> new WoolCarpetBlock(DyeColor.BLACK, properties)));
	public static final DeferredBlock<Block> LUNAR_CARPET = register("lunar_carpet", registrar -> registrar.baseCarpet().mapColour(DyeColor.MAGENTA).factory(properties -> new WoolCarpetBlock(DyeColor.MAGENTA, properties)));

	public static final DeferredBlock<Block> BARON_STONE_BUTTON = register("baron_stone_button", registrar -> registrar.baseButton(BARON_STONE.stone).factory(properties -> new ButtonBlock(AoABlockSets.BARON_STONE_SET.blockSetType(), 20, properties)));
	public static final DeferredBlock<Block> DARKENED_ROCK_BUTTON = register("darkened_rock_button", registrar -> registrar.baseButton(DARKENED_ROCK.stone).factory(properties -> new ButtonBlock(AoABlockSets.DARKENED_ROCK_SET.blockSetType(), 20, properties)));
	public static final DeferredBlock<Block> DENSE_STONE_BUTTON = register("dense_stone_button", registrar -> registrar.baseButton(DENSE_STONE.stone).factory(properties -> new ButtonBlock(AoABlockSets.DENSE_STONE_SET.blockSetType(), 20, properties)));
	public static final DeferredBlock<Block> HELLSTONE_BUTTON = register("hellstone_button", registrar -> registrar.baseButton(HELLSTONE.stone).factory(properties -> new ButtonBlock(AoABlockSets.HELLSTONE_SET.blockSetType(), 20, properties)));
	public static final DeferredBlock<Block> IROSTONE_BUTTON = register("irostone_button", registrar -> registrar.baseButton(IROSTONE.stone).factory(properties -> new ButtonBlock(AoABlockSets.IROSTONE_SET.blockSetType(), 20, properties)));
	public static final DeferredBlock<Block> RUNIC_STONE_BUTTON = register("runic_stone_button", registrar -> registrar.baseButton(RUNIC_STONE.stone).factory(properties -> new ButtonBlock(AoABlockSets.RUNIC_STONE_SET.blockSetType(), 20, properties)));

	public static final DeferredBlock<Block> DEAD_BRANCH = register("dead_branch", registrar -> registrar.factory(DeadBranchBlock::new).instabreak().replaceable().noOcclusion().sounds(SoundType.BAMBOO_WOOD).generationBlocksTab().flammable().noClip());
	public static final DeferredBlock<Block> NEST = register("nest", registrar -> registrar.baseFlammable(30, 60).noOcclusion().sounds(SoundType.GRASS).mapColour(MapColor.COLOR_BROWN).stats(1, 0.5f).decorationBlocksTab().flammable());
	public static final DeferredBlock<Block> BLACK_PETALS = register("black_petals", registrar -> registrar.mapColour(MapColor.COLOR_RED).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> BLUE_PETALS = register("blue_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> LIGHT_BLUE_PETALS = register("light_blue_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> MAGENTA_PETALS = register("magenta_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> PURPLE_PETALS = register("purple_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> RED_PETALS = register("red_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> ROSE_PETALS = register("rose_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> YELLOW_PETALS = register("yellow_petals", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).pistonBreaks().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.DIDGERIDOO));
	public static final DeferredBlock<Block> PLASTIC = register("plastic", registrar -> registrar.mapColour(MapColor.COLOR_BLUE).stats(1.5f, 10f).instrument(NoteBlockInstrument.XYLOPHONE).generationBlocksTab());
	public static final DeferredBlock<Block> BLACK_ANCIENT_TILE = register("black_ancient_tile", registrar -> registrar.stats(10, 15).needsTool().decorationBlocksTab().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> ANCIENT_TILE_CORE = register("ancient_tile_core", registrar -> registrar.stats(10, 15).needsTool().decorationBlocksTab().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> GREEN_ANCIENT_TILE = register("green_ancient_tile", registrar -> registrar.stats(10, 15).needsTool().decorationBlocksTab().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> ANCIENT_TILE_SHRINE = register("ancient_tile_shrine", registrar -> registrar.stats(10, 15).needsTool().decorationBlocksTab().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> WHITE_ANCIENT_TILE = register("white_ancient_tile", registrar -> registrar.stats(10, 15).needsTool().decorationBlocksTab().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> ANCIENT_ROCK = register("ancient_rock", registrar -> registrar.mapColour(MapColor.TERRACOTTA_BLACK).needsTool().stats(1.5f, 10f).generationBlocksTab().instrument(NoteBlockInstrument.BASEDRUM));
	public static final DeferredBlock<Block> GREEN_CANDY = register("green_candy", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(1.5f, 10f).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> RED_CANDY = register("red_candy", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(1.5f, 10f).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> WHITE_CANDY = register("white_candy", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(1.5f, 10f).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> CHOCOLATE_BLOCK = register("chocolate_block", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(1.5f, 10f).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> DARK_CHOCOLATE_BLOCK = register("dark_chocolate_block", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(1.5f, 10f).instrument(NoteBlockInstrument.BASS).sounds(SoundType.WOOD).generationBlocksTab());
	public static final DeferredBlock<Block> WHITE_CHOCOLATE_BLOCK = register("white_chocolate_block", registrar -> registrar.mapColour(MapColor.COLOR_RED).stats(1.5f, 10f).instrument(NoteBlockInstrument.BASS).sounds(SoundType.WOOD).generationBlocksTab());
	public static final DeferredBlock<Block> AQUA_COTTON_CANDY = register("aqua_cotton_candy", registrar -> registrar.mapColour(MapColor.COLOR_LIGHT_BLUE).sounds(SoundType.WOOL).stats(0.4f, 0).neverSolid().flammable().factory(properties -> new CustomToolsBlock(properties, "sword", "shears")).generationBlocksTab());
	public static final DeferredBlock<Block> PINK_COTTON_CANDY = register("pink_cotton_candy", registrar -> registrar.mapColour(MapColor.COLOR_PINK).sounds(SoundType.WOOL).stats(0.4f, 0).neverSolid().flammable().factory(properties -> new CustomToolsBlock(properties, "sword", "shears")).generationBlocksTab());
	public static final DeferredBlock<Block> CRATE = register("crate", registrar -> registrar.mapColour(MapColor.WOOD).stats(1.5f, 10).flammable().decorationBlocksTab().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> BLUE_CRYSTAL_BLOCK = register("blue_crystal_block", registrar -> registrar.sounds(SoundType.GLASS).mapColour(MapColor.COLOR_BLUE).instrument(NoteBlockInstrument.PLING).stats(1, 0).noOcclusion().noSpawns().generationBlocksTab());
	public static final DeferredBlock<Block> GREEN_CRYSTAL_BLOCK = register("green_crystal_block", registrar -> registrar.sounds(SoundType.GLASS).mapColour(MapColor.COLOR_GREEN).instrument(NoteBlockInstrument.PLING).stats(1, 0).noOcclusion().noSpawns().generationBlocksTab());
	public static final DeferredBlock<Block> PURPLE_CRYSTAL_BLOCK = register("purple_crystal_block", registrar -> registrar.sounds(SoundType.GLASS).mapColour(MapColor.COLOR_PURPLE).instrument(NoteBlockInstrument.PLING).stats(1, 0).noOcclusion().noSpawns().generationBlocksTab());
	public static final DeferredBlock<Block> RED_CRYSTAL_BLOCK = register("red_crystal_block", registrar -> registrar.sounds(SoundType.GLASS).mapColour(MapColor.COLOR_RED).instrument(NoteBlockInstrument.PLING).stats(1, 0).noOcclusion().noSpawns().generationBlocksTab());
	public static final DeferredBlock<Block> WHITE_CRYSTAL_BLOCK = register("white_crystal_block", registrar -> registrar.sounds(SoundType.GLASS).mapColour(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.PLING).stats(1, 0).noOcclusion().noSpawns().generationBlocksTab());
	public static final DeferredBlock<Block> YELLOW_CRYSTAL_BLOCK = register("yellow_crystal_block", registrar -> registrar.sounds(SoundType.GLASS).mapColour(MapColor.COLOR_YELLOW).instrument(NoteBlockInstrument.PLING).stats(1, 0).noOcclusion().noSpawns().generationBlocksTab());
	public static final DeferredBlock<Block> DEGRADED_STEEL = register("degraded_steel", registrar -> registrar.sounds(SoundType.METAL).mapColour(MapColor.METAL).decorationBlocksTab().stats(5, 10).instrument(NoteBlockInstrument.IRON_XYLOPHONE).needsTool());
	public static final DeferredBlock<Block> EYE_BLOCK = register("eye_block", registrar -> registrar.stats(4, 1.5f).decorationBlocksTab().mapColour(MapColor.COLOR_RED).sounds(SoundType.HONEY_BLOCK));
	public static final DeferredBlock<Block> GINGERBREAD = register("gingerbread", registrar -> registrar.stats(1.5f, 10f).generationBlocksTab().mapColour(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> HIVE_WALL = register("hive_wall", registrar -> registrar.stats(1.5f, 10f).mapColour(MapColor.COLOR_ORANGE).generationBlocksTab().sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> FLOWER_CORE = register("flower_core", registrar -> registrar.stats(1, 0).mapColour(MapColor.PLANT).sounds(SoundType.WOOD));
	public static final DeferredBlock<Block> GIANT_PLANT_STEM = register("giant_plant_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> BLACK_MUSHROOM_STEM = register("black_mushroom_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> BLUE_MUSHROOM_STEM = register("blue_mushroom_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> GREEN_MUSHROOM_STEM = register("green_mushroom_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> ORANGE_MUSHROOM_STEM = register("orange_mushroom_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> PURPLE_MUSHROOM_STEM = register("purple_mushroom_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> YELLOW_MUSHROOM_STEM = register("yellow_mushroom_stem", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> BLACK_MUSHROOM_BLOCK = register("black_mushroom_block", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> BLUE_MUSHROOM_BLOCK = register("blue_mushroom_block", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> GREEN_MUSHROOM_BLOCK = register("green_mushroom_block", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> ORANGE_MUSHROOM_BLOCK = register("orange_mushroom_block", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> PURPLE_MUSHROOM_BLOCK = register("purple_mushroom_block", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> YELLOW_MUSHROOM_BLOCK = register("yellow_mushroom_block", registrar -> registrar.generationBlocksTab().sounds(SoundType.WOOD).flammable().stats(0.2f).mapColour(MapColor.PLANT).instrument(NoteBlockInstrument.BASS).factory(HugeMushroomBlock::new));
	public static final DeferredBlock<Block> TENTACLE = register("tentacle", registrar -> registrar.mapColour(MapColor.TERRACOTTA_RED).stats(3, 1).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> TENTACLE_DOTS_LEFT = register("tentacle_dots_left", registrar -> registrar.mapColour(MapColor.TERRACOTTA_RED).stats(3, 1).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> TENTACLE_DOTS_RIGHT = register("tentacle_dots_right", registrar -> registrar.mapColour(MapColor.TERRACOTTA_RED).stats(3, 1).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> TENTACLE_EYE_ORANGE = register("tentacle_eye_orange", registrar -> registrar.mapColour(MapColor.TERRACOTTA_RED).stats(3, 1).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> TENTACLE_EYE_RED = register("tentacle_eye_red", registrar -> registrar.mapColour(MapColor.TERRACOTTA_RED).stats(3, 1).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> TENTACLE_GREEN = register("tentacle_green", registrar -> registrar.mapColour(MapColor.TERRACOTTA_RED).stats(3, 1).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> PARAVITE_HIVE = register("paravite_hive", registrar -> registrar.stats(1.5f, 10).mapColour(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASS).generationBlocksTab());
	public static final DeferredBlock<Block> IROPOLE = register("iropole", registrar -> registrar.stats(1.5f, 10).needsTool().factory(Iropole::new).sounds(SoundType.METAL).mapColour(MapColor.COLOR_BLACK).noPistonPulling().instrument(NoteBlockInstrument.IRON_XYLOPHONE).noOcclusion().decorationBlocksTab());
	public static final DeferredBlock<Block> BLUE_SHROOM = register("blue_shroom", registrar -> registrar.pistonBreaks().stats(2, 0.5f).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).mapColour(MapColor.COLOR_BLUE).generationBlocksTab().factory(ShroomTop::new));
	public static final DeferredBlock<Block> GREEN_SHROOM = register("green_shroom", registrar -> registrar.pistonBreaks().stats(2, 0.5f).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).mapColour(MapColor.COLOR_GREEN).generationBlocksTab().factory(ShroomTop::new));
	public static final DeferredBlock<Block> ORANGE_SHROOM = register("orange_shroom", registrar -> registrar.pistonBreaks().stats(2, 0.5f).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).mapColour(MapColor.TERRACOTTA_ORANGE).generationBlocksTab().factory(ShroomTop::new));
	public static final DeferredBlock<Block> PURPLE_SHROOM = register("purple_shroom", registrar -> registrar.pistonBreaks().stats(2, 0.5f).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).mapColour(MapColor.COLOR_PURPLE).generationBlocksTab().factory(ShroomTop::new));
	public static final DeferredBlock<Block> VOX_SHROOM = register("vox_shroom", registrar -> registrar.pistonBreaks().stats(2, 0.5f).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).mapColour(MapColor.TERRACOTTA_GREEN).generationBlocksTab().factory(ShroomTop::new));
	public static final DeferredBlock<Block> YELLOW_SHROOM = register("yellow_shroom", registrar -> registrar.pistonBreaks().stats(2, 0.5f).sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS).mapColour(MapColor.COLOR_YELLOW).generationBlocksTab().factory(ShroomTop::new));
	public static final DeferredBlock<Block> SHROOM_STEM = register("shroom_stem", registrar -> registrar.stats(2, 0.5f).mapColour(MapColor.TERRACOTTA_WHITE).generationBlocksTab().pistonBreaks().sounds(SoundType.STEM).instrument(NoteBlockInstrument.BASS).factory(ShroomStem::new));
	public static final DeferredBlock<Block> VOX_LOG = register("vox_log", registrar -> registrar.baseLog(MapColor.COLOR_GREEN, MapColor.COLOR_GREEN, null).factory(VoxLog::new));
	public static final DeferredBlock<Block> CELEVE_STEM = register("celeve_stem", registrar -> registrar.baseLog(MapColor.TERRACOTTA_WHITE, MapColor.TERRACOTTA_WHITE, null));
	public static final DeferredBlock<Block> LUNAR_PILLAR = register("lunar_pillar", registrar -> registrar.stats(1.5f, 10).instrument(NoteBlockInstrument.BASS).noOcclusion().noPistonPulling().factory(LunarPillarBlock::new).mapColour(MapColor.COLOR_PURPLE).decorationBlocksTab());
	public static final DeferredBlock<Block> SPIKEY_PILLAR = register("spikey_pillar", registrar -> registrar.stats(1.5f, 10).instrument(NoteBlockInstrument.BASS).noOcclusion().noPistonPulling().factory(SpikeyPillarBlock::new).mapColour(MapColor.COLOR_PURPLE).decorationBlocksTab());
	public static final DeferredBlock<Block> TOXIC_BLOCK = register("toxic_block", registrar -> registrar.mapColour(MapColor.TERRACOTTA_GREEN).stats(1.5f, 1).sounds(SoundType.SLIME_BLOCK).factory(ToxicBlock::new).generationBlocksTab());
	public static final DeferredBlock<Block> SHYRE_CLOUD = register("shyre_cloud", registrar -> registrar.noClip().neverSolid().replaceable().stats(0).sounds(SoundType.WOOL).generationBlocksTab().noDrops().factory(CloudBlock::new));
	public static final DeferredBlock<Block> SHYRE_CRUST = register("shyre_crust", registrar -> registrar.mapColour(MapColor.GOLD).stats(45f, 1000f).instrument(NoteBlockInstrument.BASEDRUM).needsTool());

	public static final DeferredBlock<Block> FERTILISED_FARMLAND = register("fertilised_farmland", registrar -> registrar.randomTicks().mapColour(MapColor.DIRT).stats(0.6f).sounds(SoundType.GRAVEL).coversScreen((state, world, pos) -> true).suffocate((state, world, pos) -> true).factory(FertilisedFarmland::new).utilityBlocksTab());

	public static final DeferredBlock<Block> GIANT_SNAIL_ACID = register("giant_snail_acid", registrar -> registrar.pistonBreaks().noItem().noOcclusion().noScreenCover().noSpawns().mapColour(MapColor.TERRACOTTA_GREEN).sounds(SoundType.WET_GRASS).noDrops().randomTicks().neverSolid().replaceable().factory(GiantSnailAcid::new));
	public static final DeferredBlock<Block> ORANGE_ACID = register("orange_acid", registrar -> registrar.pistonBreaks().noItem().noOcclusion().noScreenCover().noSpawns().mapColour(MapColor.TERRACOTTA_ORANGE).sounds(SoundType.WET_GRASS).noDrops().randomTicks().neverSolid().replaceable().factory(AcidBlock::new));

	public static final FluidUtil.RegisteredFluidHolder CANDIED_WATER = new FluidUtil.Builder("candied_water", AoAFluidTypes.CANDIED_WATER).defaultRegisterAll();
	public static final FluidUtil.RegisteredFluidHolder TOXIC_WASTE = new FluidUtil.Builder("toxic_waste", AoAFluidTypes.TOXIC_WASTE).tickRate(50).customBlock((fluid, properties) -> () -> new ToxicWaste(fluid, properties)).defaultRegisterAll();
	public static final FluidUtil.RegisteredFluidHolder TAR = new FluidUtil.Builder("tar", AoAFluidTypes.TAR).tickRate(50).customBlock((fluid, properties) -> () -> new Tar(fluid, properties)).defaultRegisterAll();

	public static final DeferredBlock<Block> LUNAR_PAD = register("lunar_pad", registrar -> registrar.decorationBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(1.5f, 10f));
	public static final DeferredBlock<Block> COMPASS_RUNE_POST = register("compass_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.COMPASS_RUNE)));
	public static final DeferredBlock<Block> DISTORTION_RUNE_POST = register("distortion_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.DISTORTION_RUNE)));
	public static final DeferredBlock<Block> ENERGY_RUNE_POST = register("energy_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.ENERGY_RUNE)));
	public static final DeferredBlock<Block> FIRE_RUNE_POST = register("fire_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.FIRE_RUNE)));
	public static final DeferredBlock<Block> KINETIC_RUNE_POST = register("kinetic_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.KINETIC_RUNE)));
	public static final DeferredBlock<Block> LIFE_RUNE_POST = register("life_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.LIFE_RUNE)));
	public static final DeferredBlock<Block> LUNAR_RUNE_POST = register("lunar_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.LUNAR_RUNE)));
	public static final DeferredBlock<Block> POISON_RUNE_POST = register("poison_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.POISON_RUNE)));
	public static final DeferredBlock<Block> POWER_RUNE_POST = register("power_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.POWER_RUNE)));
	public static final DeferredBlock<Block> STORM_RUNE_POST = register("storm_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.STORM_RUNE)));
	public static final DeferredBlock<Block> STRIKE_RUNE_POST = register("strike_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.STRIKE_RUNE)));
	public static final DeferredBlock<Block> WATER_RUNE_POST = register("water_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.WATER_RUNE)));
	public static final DeferredBlock<Block> WIND_RUNE_POST = register("wind_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.WIND_RUNE)));
	public static final DeferredBlock<Block> WITHER_RUNE_POST = register("wither_rune_post", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_BLACK).stats(10, 15).factory(properties -> new RunePostBlock(properties, AoAItems.WITHER_RUNE)));
	public static final DeferredBlock<Block> CARVED_RUNE_OF_DIRECTION = register("carved_rune_of_direction", registrar -> registrar.mapColour(MapColor.COLOR_BLACK).needsTool().stats(3, 10).utilityBlocksTab());
	public static final DeferredBlock<Block> CARVED_RUNE_OF_POWER = register("carved_rune_of_power", registrar -> registrar.mapColour(MapColor.COLOR_BLACK).needsTool().stats(3, 10).utilityBlocksTab().factory(CarvedRuneOfPower::new));
	public static final DeferredBlock<Block> CARVED_RUNE_OF_REALITY = register("carved_rune_of_reality", registrar -> registrar.mapColour(MapColor.COLOR_BLACK).needsTool().stats(3, 10).utilityBlocksTab());
	public static final DeferredBlock<Block> CARVED_RUNE_OF_SPACE = register("carved_rune_of_space", registrar -> registrar.mapColour(MapColor.COLOR_BLACK).needsTool().stats(3, 10).utilityBlocksTab());
	public static final DeferredBlock<Block> CARVED_RUNE_OF_TRAVEL = register("carved_rune_of_travel", registrar -> registrar.mapColour(MapColor.COLOR_BLACK).needsTool().stats(3, 10).utilityBlocksTab());
	public static final DeferredBlock<Block> CHARGING_TABLE = register("charging_table", registrar -> registrar.utilityBlocksTab().mapColour(MapColor.COLOR_LIGHT_GRAY).stats(5, 4).needsTool().factory(ChargingTable::new));
	public static final DeferredBlock<Block> DUSTOPIAN_LAMP = register("dustopian_lamp", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).mapColour(MapColor.COLOR_GRAY).stats(5, 10).light(state -> state.getValue(DustopianLamp.LIT) ? 14 : 0).factory(DustopianLamp::new));
	public static final DeferredBlock<Block> ARCHAIC_LADDER = register("archaic_ladder", registrar -> registrar.baseLadder().mapColour(MapColor.TERRACOTTA_BROWN).stats(1, 0.5f));
	public static final DeferredBlock<Block> STEEL_PLATE = register("steel_plate", registrar -> registrar.utilityBlocksTab().factory(SteelPlateBlock::new).mapColour(MapColor.METAL).stats(7, 20).needsTool().stopsPistons());

	public static final DeferredBlock<Block> DIMENSIONAL_FABRIC = register("dimensional_fabric", registrar -> registrar.noItem().stopsPistons().mapColour(MapColor.COLOR_BLACK).unbreakable().noSpawns().sounds(SoundType.WOOL).factory(DimensionalFabric::new));
	public static final DeferredBlock<Block> AIR_GAP = register("air_gap", registrar -> registrar.noItem().stopsPistons().stats(BlockUtil.UNBREAKABLE_HARDNESS, 0).air().noDrops().noOcclusion().noClip().factory(AirGap::new));
	public static final DeferredBlock<Block> CHECKPOINT = register("checkpoint", registrar -> registrar.noItem().stopsPistons().unbreakable().air().noOcclusion().emissive().noClip().factory(CheckpointBlock::new));

	public static final DeferredBlock<Block> BOSS_ALTAR = register("boss_altar", registrar -> registrar.unbreakable().stopsPistons().light(2).emissive().noOcclusion().sounds(SoundType.METAL).mapColour(MapColor.COLOR_BLACK).factory(BossAltar::new));
	public static final DeferredBlock<Block> ARMY_BLOCK = register("army_block", registrar -> registrar.stats(35, 1000).randomTicks().mapColour(MapColor.TERRACOTTA_GREEN).factory(ArmyBlock::new).utilityBlocksTab());
	public static final DeferredBlock<Block> BARONESS_ALTAR = register("baroness_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_PURPLE).factory(BaronessAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> CLUNKHEAD_ALTAR = register("clunkhead_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_LIGHT_BLUE).factory(ClunkheadAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> CRAEXXEUS_ALTAR = register("craexxeus_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_CYAN).factory(CraexxeusAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> CREEP_ALTAR = register("creep_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_GREEN).factory(CreepAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> DRACYON_ALTAR = register("dracyon_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_BLUE).factory(DracyonAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> GRAW_ALTAR = register("graw_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.TERRACOTTA_ORANGE).factory(GrawAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> GUARDIAN_ALTAR = register("guardian_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_LIGHT_GREEN).factory(GuardianAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> HIVE_SPAWNER = register("hive_spawner", registrar -> registrar.stats(35, 1000).mapColour(MapColor.TERRACOTTA_RED).factory(HiveSpawner::new).utilityBlocksTab());
	public static final DeferredBlock<Block> ILLUSION_ALTAR = register("illusion_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_PURPLE).factory(IllusionAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> KROR_ALTAR = register("kror_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_GRAY).factory(KrorAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> MECHBOT_ALTAR = register("mechbot_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_YELLOW).factory(MechBotAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> POWER_STATION = register("power_station", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_YELLOW).factory(PowerStation::new).utilityBlocksTab());
	public static final DeferredBlock<Block> PRIMORDIAL_SHRINE = register("primordial_shrine", registrar -> registrar.stats(35, 1000).mapColour(MapColor.TERRACOTTA_BLACK).factory(PrimordialShrine::new).utilityBlocksTab());
	public static final DeferredBlock<Block> SHADOW_ALTAR = register("shadow_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_BLACK).factory(ShadowAltar::new).utilityBlocksTab());
	public static final DeferredBlock<Block> VINOCORNE_SHRINE = register("vinocorne_shrine", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_GREEN).factory(VinocorneShrine::new).utilityBlocksTab());
	public static final DeferredBlock<Block> VOXXULON_ALTAR = register("voxxulon_altar", registrar -> registrar.stats(35, 1000).mapColour(MapColor.COLOR_GREEN).factory(VoxxulonAltar::new).utilityBlocksTab());
	
	public static final DeferredBlock<Block> ABYSS_PORTAL =  register("abyss_portal", registrar -> registrar.basePortal().factory(AbyssPortalBlock::new));
	public static final DeferredBlock<Block> BARATHOS_PORTAL = register("barathos_portal", registrar -> registrar.basePortal().factory(BarathosPortalBlock::new));
	public static final DeferredBlock<Block> CANDYLAND_PORTAL = register("candyland_portal", registrar -> registrar.basePortal().factory(CandylandPortalBlock::new));
	public static final DeferredBlock<Block> CELEVE_PORTAL = register("celeve_portal", registrar -> registrar.basePortal().factory(CelevePortalBlock::new));
	public static final DeferredBlock<Block> CREEPONIA_PORTAL = register("creeponia_portal", registrar -> registrar.basePortal().factory(CreeponiaPortalBlock::new));
	public static final DeferredBlock<Block> CRYSTEVIA_PORTAL = register("crystevia_portal", registrar -> registrar.basePortal().factory(CrysteviaPortalBlock::new));
	public static final DeferredBlock<Block> DEEPLANDS_PORTAL = register("deeplands_portal", registrar -> registrar.basePortal().factory(DeeplandsPortalBlock::new));
	public static final DeferredBlock<Block> DUSTOPIA_PORTAL = register("dustopia_portal", registrar -> registrar.basePortal().factory(DustopiaPortalBlock::new));
	public static final DeferredBlock<Block> GARDENCIA_PORTAL = register("gardencia_portal", registrar -> registrar.basePortal().factory(GardenciaPortalBlock::new));
	public static final DeferredBlock<Block> GRECKON_PORTAL = register("greckon_portal", registrar -> registrar.basePortal().factory(GreckonPortalBlock::new));
	public static final DeferredBlock<Block> HAVEN_PORTAL = register("haven_portal", registrar -> registrar.basePortal().factory(HavenPortalBlock::new));
	public static final DeferredBlock<Block> IROMINE_PORTAL = register("iromine_portal", registrar -> registrar.basePortal().factory(IrominePortalBlock::new));
	public static final DeferredBlock<Block> LBOREAN_PORTAL = register("lborean_portal", registrar -> registrar.basePortal().factory(LboreanPortalBlock::new));
	public static final DeferredBlock<Block> LELYETIA_PORTAL = register("lelyetia_portal", registrar -> registrar.basePortal().factory(LelyetiaPortalBlock::new));
	public static final DeferredBlock<Block> LUNALUS_PORTAL = register("lunalus_portal", registrar -> registrar.basePortal().factory(LunalusPortalBlock::new));
	public static final DeferredBlock<Block> MYSTERIUM_PORTAL = register("mysterium_portal", registrar -> registrar.basePortal().factory(MysteriumPortalBlock::new));
	public static final DeferredBlock<Block> NETHER_PORTAL = register("nether_portal", registrar -> registrar.basePortal().factory(NetherPortalBlock::new));
	public static final DeferredBlock<Block> NOWHERE_PORTAL = register("nowhere_portal", registrar -> registrar.basePortal().mapColour(MapColor.GOLD).factory(NowherePortalBlock::new));
	public static final DeferredBlock<Block> PRECASIA_PORTAL = register("precasia_portal", registrar -> registrar.basePortal().factory(PrecasiaPortalBlock::new));
	public static final DeferredBlock<Block> RUNANDOR_PORTAL = register("runandor_portal", registrar -> registrar.basePortal().factory(RunandorPortalBlock::new));
	public static final DeferredBlock<Block> SHYRELANDS_PORTAL = register("shyrelands_portal", registrar -> registrar.basePortal().factory(ShyrelandsPortalBlock::new));
	public static final DeferredBlock<Block> VOX_PONDS_PORTAL = register("vox_ponds_portal", registrar -> registrar.basePortal().factory(VoxPondsPortalBlock::new));

	public static final DeferredBlock<Block> NOWHERE_ACTIVITY_PORTAL = register("nowhere_activity_portal", registrar -> registrar.basePortal().mapColour(MapColor.GOLD).noItem().factory(NowhereActivityPortal::new));

	public static final DeferredBlock<Block> FRAME_BENCH = register("frame_bench", registrar -> registrar.factory(FrameBench::new).mapColour(MapColor.WOOD).sounds(SoundType.WOOD).flammable().stats(2.5f, 0f).instrument(NoteBlockInstrument.BASS).utilityBlocksTab());
	public static final DeferredBlock<Block> INFUSION_TABLE = register("infusion_table", registrar -> registrar.factory(InfusionTable::new).mapColour(MapColor.COLOR_PURPLE).stats(10, 15).instrument(NoteBlockInstrument.BASS).utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> IMBUING_CHAMBER = register("imbuing_chamber", registrar -> registrar.factory(ImbuingChamber::new).mapColour(MapColor.COLOR_PURPLE).stats(10, 15).instrument(NoteBlockInstrument.BASS).noOcclusion().utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> INFUSED_PRESS = register("infused_press", registrar -> registrar.factory(InfusedPress::new).mapColour(MapColor.COLOR_BLACK).stats(30, 500).stopsPistons().utilityBlocksTab().instrument(NoteBlockInstrument.BASS).needsTool());
	public static final DeferredBlock<Block> TINKERERS_TABLE = register("tinkerers_table", registrar -> registrar.factory(TinkerersTable::new).mapColour(MapColor.WOOD).sounds(SoundType.WOOD).stats(5f, 5f).utilityBlocksTab().instrument(NoteBlockInstrument.BASS));

	public static final DeferredBlock<Block> COCOON = register("cocoon", registrar -> registrar.factory(CocoonBlock::new).mapColour(MapColor.WOOL).itemFactory(CocoonItem::new).stats(2).pistonBreaks().sounds(SoundType.COBWEB).noOcclusion().randomTicks().utilityBlocksTab());

	public static final DeferredBlock<Block> VOX_CRATE = register("vox_crate", registrar -> registrar.utilityBlocksTab().stats(5, 3).mapColour(MapColor.TERRACOTTA_GREEN).factory(VoxCrate::new).flammable().sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> BLUE_CRYSTAL_CREATOR = register("blue_crystal_creator", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.COLOR_BLUE).needsTool().instrument(NoteBlockInstrument.CHIME).factory(properties -> new CrystalCreator(properties, AoAItems.BLUE_GEMSTONES, AoAItems.BLUE_GEMTRAP, AoAItems.BLUE_CRYSTAL)));
	public static final DeferredBlock<Block> GREEN_CRYSTAL_CREATOR = register("green_crystal_creator", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.COLOR_GREEN).needsTool().instrument(NoteBlockInstrument.CHIME).factory(properties -> new CrystalCreator(properties, AoAItems.GREEN_GEMSTONES, AoAItems.GREEN_GEMTRAP, AoAItems.GREEN_CRYSTAL)));
	public static final DeferredBlock<Block> PURPLE_CRYSTAL_CREATOR = register("purple_crystal_creator", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.COLOR_PURPLE).needsTool().instrument(NoteBlockInstrument.CHIME).factory(properties -> new CrystalCreator(properties, AoAItems.PURPLE_GEMSTONES, AoAItems.PURPLE_GEMTRAP, AoAItems.PURPLE_CRYSTAL)));
	public static final DeferredBlock<Block> RED_CRYSTAL_CREATOR = register("red_crystal_creator", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.COLOR_RED).needsTool().instrument(NoteBlockInstrument.CHIME).factory(properties -> new CrystalCreator(properties, AoAItems.RED_GEMSTONES, AoAItems.RED_GEMTRAP, AoAItems.RED_CRYSTAL)));
	public static final DeferredBlock<Block> WHITE_CRYSTAL_CREATOR = register("white_crystal_creator", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.TERRACOTTA_WHITE).needsTool().instrument(NoteBlockInstrument.CHIME).factory(properties -> new CrystalCreator(properties, AoAItems.WHITE_GEMSTONES, AoAItems.WHITE_GEMTRAP, AoAItems.WHITE_CRYSTAL)));
	public static final DeferredBlock<Block> YELLOW_CRYSTAL_CREATOR = register("yellow_crystal_creator", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.COLOR_YELLOW).needsTool().instrument(NoteBlockInstrument.CHIME).factory(properties -> new CrystalCreator(properties, AoAItems.YELLOW_GEMSTONES, AoAItems.YELLOW_GEMTRAP, AoAItems.YELLOW_CRYSTAL)));
	public static final DeferredBlock<Block> CRYSTAL_EXTENSION_SHRINE = register("crystal_extension_shrine", registrar -> registrar.utilityBlocksTab().sounds(SoundType.GLASS).stats(10, 15).mapColour(MapColor.COLOR_YELLOW).needsTool().instrument(NoteBlockInstrument.CHIME).factory(CrystalExtensionShrine::new));
	public static final DeferredBlock<Block> DEEP_CASE = register("deep_case", registrar -> registrar.mapColour(MapColor.TERRACOTTA_LIGHT_GRAY).stats(5, 3).instrument(NoteBlockInstrument.BASS).utilityBlocksTab());
	public static final DeferredBlock<Block> DIVINE_STATION = register("divine_station", registrar -> registrar.factory(DivineStation::new).stats(5, 10).mapColour(MapColor.COLOR_CYAN).sounds(SoundType.GLASS).utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> HAUNTING_TABLE = register("haunting_table", registrar -> registrar.factory(HauntingTable::new).mapColour(MapColor.TERRACOTTA_PURPLE).stats(10, 15).instrument(NoteBlockInstrument.BASS).utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> IRO_CRATE = register("iro_crate", registrar -> registrar.mapColour(MapColor.TERRACOTTA_LIGHT_GRAY).stats(5, 10).sounds(SoundType.METAL).instrument(NoteBlockInstrument.BASS).needsTool());
	public static final DeferredBlock<Block> LUNAR_CREATION_TABLE = register("lunar_creation_table", registrar -> registrar.factory(LunarCreationTable::new).mapColour(MapColor.COLOR_PURPLE).stats(10, 15).instrument(NoteBlockInstrument.BASS).utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> MENDING_TABLE = register("mending_table", registrar -> registrar.factory(MendingTable::new).stats(5, 10).mapColour(MapColor.COLOR_LIGHT_BLUE).instrument(NoteBlockInstrument.BASS).utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> PETAL_CRAFTING_STATION = register("petal_crafting_station", registrar -> registrar.factory(PetalCraftingStation::new).mapColour(MapColor.COLOR_PURPLE).instrument(NoteBlockInstrument.BASS).stats(5, 10).needsTool().utilityBlocksTab());
	public static final DeferredBlock<Block> RUNE_RANDOMIZER = register("rune_randomizer", registrar -> registrar.factory(RuneRandomizer::new).mapColour(MapColor.COLOR_CYAN).instrument(NoteBlockInstrument.BASS).stats(10, 15).utilityBlocksTab().needsTool());
	public static final DeferredBlock<Block> RUNIC_BLOCK = register("runic_block", registrar -> registrar.factory(RunicBlock::new).mapColour(MapColor.TERRACOTTA_BLUE).stats(10, 15).sounds(SoundType.STONE).utilityBlocksTab().needsTool().instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> TEA_SINK = register("tea_sink", registrar -> registrar.flammable().instrument(NoteBlockInstrument.BASS).sounds(SoundType.WOOD).factory(TeaSink::new).stats(5, 3).needsTool().mapColour(MapColor.COLOR_LIGHT_GRAY).utilityBlocksTab());
	public static final DeferredBlock<Block> VOX_STORE_CRATE = register("vox_store_crate", registrar -> registrar.utilityBlocksTab().stats(5, 3).mapColour(MapColor.TERRACOTTA_GREEN).factory(VoxStoreCrate::new).flammable().sounds(SoundType.WOOD).instrument(NoteBlockInstrument.BASS));
	public static final DeferredBlock<Block> WHITEWASHING_TABLE = register("whitewashing_table", registrar -> registrar.mapColour(MapColor.TERRACOTTA_WHITE).stats(5, 10).instrument(NoteBlockInstrument.BASS).factory(WhitewashingTable::new).needsTool().utilityBlocksTab());

	public static final DeferredBlock<Block> DRYCLAWS = register("dryclaws", registrar -> registrar.basePlant(state -> state.is(Tags.Blocks.STONES), 10f, 12f));
	public static final DeferredBlock<Block> DEAD_MANS_FINGER = register("dead_mans_finger", registrar -> registrar.basePlant(state -> state.is(Tags.Blocks.STONES), 13f, 8f));
	public static final DeferredBlock<Block> SAND_CATCHER = register("sand_catcher", registrar -> registrar.basePlant(state -> state.is(Tags.Blocks.SANDS), 12f, 12f).factory(SandCatcher::new));


	public static final PottablePlantBlockGroup ARCBULB = registerGroup("arcbulb", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.GLOWING, 8));
	public static final PottablePlantBlockGroup ARCFLOWER = registerGroup("arcflower", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.GLOWING, 9));
	public static final PottablePlantBlockGroup BLUE_DAYLOOMS = registerGroup("blue_daylooms", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.HERO_OF_THE_VILLAGE, 7));
	public static final PottablePlantBlockGroup BLUE_GLOWSHROOM = registerGroup("blue_glowshroom", PottablePlantBlockGroup::new, registrar -> registrar.baseMushroom().light(4).mapColour(DyeColor.BLUE));

	public static final PottablePlantBlockGroup CANDYCANE = registerGroup("candycane", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.MOVEMENT_SPEED, 7).sounds(SoundType.STONE).mapColour(DyeColor.WHITE));
	public static final PottablePlantBlockGroup DAWN_FLOWER = registerGroup("dawn_flower", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.INVISIBILITY, 8));
	public static final PottablePlantBlockGroup GREEN_GLOWSHROOM = registerGroup("green_glowshroom", PottablePlantBlockGroup::new, registrar -> registrar.baseMushroom().light(4).mapColour(DyeColor.GREEN));
	public static final PottablePlantBlockGroup HAUNTED_FLOWER = registerGroup("haunted_flower", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.DARKNESS, 7));
	public static final PottablePlantBlockGroup LUNALIP = registerGroup("lunalip", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.SLOW_FALLING, 9));
	public static final PottablePlantBlockGroup ORANGE_GLOWSHROOM = registerGroup("orange_glowshroom", PottablePlantBlockGroup::new, registrar -> registrar.baseMushroom().light(4).mapColour(DyeColor.ORANGE));
	public static final PottablePlantBlockGroup PURPLE_GLOWSHROOM = registerGroup("purple_glowshroom", PottablePlantBlockGroup::new, registrar -> registrar.baseMushroom().light(4).mapColour(DyeColor.PURPLE));
	public static final PottablePlantBlockGroup RUNIC_BUSH = registerGroup("runic_bush", PottablePlantBlockGroup::new, BlockRegistrar::basePlantOld);
	public static final PottablePlantBlockGroup YELLOW_DAYLOOMS = registerGroup("yellow_daylooms", PottablePlantBlockGroup::new, registrar -> registrar.baseFlower(MobEffects.HERO_OF_THE_VILLAGE, 7));
	public static final PottablePlantBlockGroup YELLOW_GLOWSHROOM = registerGroup("yellow_glowshroom", PottablePlantBlockGroup::new, registrar -> registrar.baseMushroom().light(4).mapColour(DyeColor.YELLOW));

	public static final DeferredBlock<Block> BLUE_CANDY_GRASS = register("blue_candy_grass", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> BLUE_CELEVIANS = register("blue_celevians", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> BLUE_CRYSTAL_PLANT = register("blue_crystal_plant", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_BLUE).light(5).emissive().sounds(SoundType.GLASS).factory(CavePlant::new));
	public static final DeferredBlock<Block> BLUE_OCEALITES = register("blue_ocealites", registrar -> registrar.mapColour(MapColor.PLANT).sounds(SoundType.GRASS).noClip().neverSolid().pistonBreaks().modelOffset(BlockBehaviour.OffsetType.XZ).instabreak().replaceable().factory(GenericWaterPlant::new).generationBlocksTab());
	public static final DeferredBlock<Block> BUREAL_STOCKS = register("bureal_stocks", registrar -> registrar.baseWaterPlant().mapColour(MapColor.TERRACOTTA_BLUE));
	public static final DeferredBlock<Block> CALAB_GRASS = register("calab_grass", registrar -> registrar.basePlantOld().factory(properties -> new GrowableDoublePlantBlock(properties, AoABlocks.CALAB_LONG_GRASS)));
	public static final DeferredBlock<DoublePlantBlock> CALAB_LONG_GRASS = register("calab_long_grass", registrar -> registrar.basePlantOld().factory(DoublePlantBlock::new));
	public static final DeferredBlock<Block> CREEP_BUSH = register("creep_bush", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> CREEP_FLOWERS = register("creep_flowers", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> DAILEERS = register("daileers", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> DAWN_BUSH = register("dawn_bush", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> DAWN_GRASS = register("dawn_grass", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> DEAD_GRASS = register("dead_grass", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> DEEP_BLOOMS = register("deep_blooms", registrar -> registrar.basePlantOld().factory(CavePlant::new));
	public static final DeferredBlock<Block> DEEP_GRASS = register("deep_grass", registrar -> registrar.basePlantOld().factory(CavePlant::new));
	public static final DeferredBlock<Block> GREEN_CRYSTAL_PLANT = register("green_crystal_plant", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_GREEN).light(5).emissive().sounds(SoundType.GLASS).factory(CavePlant::new));
	public static final DeferredBlock<Block> GREEN_WATERWEEDS = register("green_waterweeds", registrar -> registrar.baseWaterPlant().mapColour(DyeColor.GREEN));
	public static final DeferredBlock<Block> HAVEN_GRASS_PLANT = register("haven_grass_plant", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> HORIZON_DAISIES = register("horizon_daisies", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> IROTOPS = register("irotops", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> IRO_GRASS = register("iro_grass", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> LELYETIAN_WEEDS = register("lelyetian_weeds", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> LELYETIAN_WEEDS_DOWN = register("lelyetian_weeds_down", registrar -> registrar.basePlantOld().factory(UpsideDownGenericPlant::new));
	public static final DeferredBlock<Block> LUNTAR = register("luntar", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> LURCHIANS = register("lurchians", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> LYLIPS = register("lylips", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> MAGIAS = register("magias", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> MYSTIC_BUSH = register("mystic_bush", registrar -> registrar.basePlantOld().factory(MysticBush::new));
	public static final DeferredBlock<Block> MYSTIC_FERNS = register("mystic_ferns", registrar -> registrar.basePlantOld().factory(MysticFerns::new));
	public static final DeferredBlock<Block> PINK_CANDY_GRASS = register("pink_candy_grass", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> PINK_DAYLOOMS = register("pink_daylooms", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> PURPLE_CELEVIANS = register("purple_celevians", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> PURPLE_CRYSTAL_PLANT = register("purple_crystal_plant", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_PURPLE).light(5).emissive().sounds(SoundType.GLASS).factory(CavePlant::new));
	public static final DeferredBlock<Block> RAINBOW_GRASS = register("rainbow_grass", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> RED_CELEVIANS = register("red_celevians", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> RED_CRYSTAL_PLANT = register("red_crystal_plant", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_RED).light(5).emissive().sounds(SoundType.GLASS).factory(CavePlant::new));
	public static final DeferredBlock<Block> RED_WATERWEEDS = register("red_waterweeds", registrar -> registrar.baseWaterPlant().mapColour(MapColor.TERRACOTTA_RED).factory(StackableWaterPlant::new));
	public static final DeferredBlock<Block> RUNE_BULBS = register("rune_bulbs", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> SHYRE_WEED = register("shyre_weed", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> TANGLE_THORNS = register("tangle_thorns", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_BROWN).factory(TangleThorns::new));
	public static final DeferredBlock<Block> TRILLIAD_BLOOM = register("trilliad_bloom", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_CYAN));
	public static final DeferredBlock<Block> TUBEICLES = register("tubeicles", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> WHITE_CELEVIANS = register("white_celevians", BlockRegistrar::basePlantOld);
	public static final DeferredBlock<Block> WHITE_CRYSTAL_PLANT = register("white_crystal_plant", registrar -> registrar.basePlantOld().mapColour(MapColor.TERRACOTTA_WHITE).light(5).emissive().sounds(SoundType.GLASS).factory(CavePlant::new));
	public static final DeferredBlock<Block> WHITE_WATERWEEDS = register("white_waterweeds", registrar -> registrar.baseWaterPlant().mapColour(DyeColor.WHITE));
	public static final DeferredBlock<Block> YELLOW_CRYSTAL_PLANT = register("yellow_crystal_plant", registrar -> registrar.basePlantOld().mapColour(MapColor.COLOR_YELLOW).light(5).emissive().sounds(SoundType.GLASS).factory(CavePlant::new));
	public static final DeferredBlock<Block> YELLOW_WATERWEEDS = register("yellow_waterweeds", registrar -> registrar.mapColour(MapColor.PLANT).sounds(SoundType.GRASS).noClip().neverSolid().pistonBreaks().modelOffset(BlockBehaviour.OffsetType.XZ).instabreak().replaceable().factory(GenericWaterPlant::new).generationBlocksTab());

	public static final DeferredBlock<Block> ANCIENT_VINES = register("ancient_vines", registrar -> registrar.baseStackablePlant(AncientVinesBlock::new));

	public static final DeferredBlock<Block> BLUE_LOLLYPOP = register("blue_lollypop", registrar -> registrar.basePlantOld());//}, () -> new MultiStackablePlant(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, Material.GRASS, Material.DIRT).addStemBlock(AoABlocks.RED_LOLLYPOP, AoABlocks.YELLOW_LOLLYPOP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> RED_LOLLYPOP = register("red_lollypop", registrar -> registrar.basePlantOld());//}, () -> new MultiStackablePlant(Material.GLASS, MaterialColor.COLOR_RED, SoundType.GLASS, Material.GRASS, Material.DIRT).addStemBlock(AoABlocks.BLUE_LOLLYPOP, AoABlocks.YELLOW_LOLLYPOP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> YELLOW_LOLLYPOP = register("yellow_lollypop", registrar -> registrar.basePlantOld());//}, () -> new MultiStackablePlant(Material.GLASS, MaterialColor.COLOR_YELLOW, SoundType.GLASS, Material.GRASS, Material.DIRT).addStemBlock(AoABlocks.BLUE_LOLLYPOP, AoABlocks.RED_LOLLYPOP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BLOOD_PINE_STEM = register("blood_pine_stem", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.BLOOD_PINE), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BLOOD_PINE = register("blood_pine", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.BLOOD_PINE_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BLOOD_SPIKES = register("blood_spikes", registrar -> registrar.basePlantOld());//}, BloodSpikes::new, () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BLOOD_STRANDS = register("blood_strands", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.COLOR_RED, Material.DIRT, Material.GRASS, Material.STONE, Material.VEGETABLE), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BULB_STOCK = register("bulb_stock", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.BULB_STOCK_CAP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BULB_STOCK_CAP = register("bulb_stock_cap", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.COLOR_RED, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.BULB_STOCK), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> CELEBULBS_STEM = register("celebulbs_stem", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.YELLOW_CELEBULBS), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> GREEN_CELEBULBS = register("green_celebulbs", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.CELEBULBS_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> YELLOW_CELEBULBS = register("yellow_celebulbs", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.CELEBULBS_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> CORAL_CAGE = register("coral_cage", registrar -> registrar.basePlantOld());//}, () -> new StackableWaterPlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT, Material.STONE), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> DAWNWOOD_BARS = register("dawnwood_bars", registrar -> registrar.basePlantOld().stats(1f, 0f).factory(DawnwoodBars::new).mapColour(MapColor.COLOR_BLACK));//}, DawnwoodBars::new, () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> EYE_SHRUB_STEM = register("eye_shrub_stem", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.EYE_SHRUB), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> EYE_SHRUB = register("eye_shrub", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.EYE_SHRUB_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> GARDEN_GRASS = register("garden_grass", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BLUE_HAVENDALES_STEM = register("blue_havendales_stem", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.BLUE_HAVENDALES), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> BLUE_HAVENDALES = register("blue_havendales", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.BLUE_HAVENDALES_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> PINK_HAVENDALES_STEM = register("pink_havendales_stem", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.PINK_HAVENDALES), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> PINK_HAVENDALES = register("pink_havendales", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.PINK_HAVENDALES_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> YELLOW_HAVENDALES_STEM = register("yellow_havendales_stem", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.YELLOW_HAVENDALES), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> YELLOW_HAVENDALES = register("yellow_havendales", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.YELLOW_HAVENDALES_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> LELYETIAN_STEM = register("lelyetian_stem", registrar -> registrar.basePlantOld());//}, () -> new BidirectionalStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setBottomHatBlock(AoABlocks.LELYETIAN_STEM_CAP_DOWN).setHatBlock(AoABlocks.LELYETIAN_STEM_CAP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> LELYETIAN_STEM_CAP = register("lelyetian_stem_cap", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> LELYETIAN_STEM_CAP_DOWN = register("lelyetian_stem_cap_down", registrar -> registrar.basePlantOld());//}, () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_STEM), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> LELYETIAN_WIGGLER = register("lelyetian_wiggler", registrar -> registrar.basePlantOld());//}, () -> new BidirectionalStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setBottomHatBlock(AoABlocks.LELYETIAN_WIGGLER_BOTTOM).setHatBlock(AoABlocks.LELYETIAN_WIGGLER_TOP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> LELYETIAN_WIGGLER_BOTTOM = register("lelyetian_wiggler_bottom", registrar -> registrar.basePlantOld());//}, () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_WIGGLER), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> LELYETIAN_WIGGLER_TOP = register("lelyetian_wiggler_top", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_WIGGLER), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> GREEN_PEPPERMINT = register("green_peppermint", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(Material.GLASS, MaterialColor.PLANT, SoundType.GLASS, Material.GRASS, Material.DIRT), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> RED_PEPPERMINT = register("red_peppermint", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(Material.GLASS, MaterialColor.PLANT, SoundType.GLASS, Material.GRASS, Material.DIRT), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> PLASTIC_STICK = register("plastic_stick", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(Material.STONE, MaterialColor.PLANT, SoundType.STONE, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.CANDY_TUBE), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> CANDY_TUBE = register("candy_tube", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(Material.GLASS, MaterialColor.PLANT, SoundType.GLASS, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.PLASTIC_STICK), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> SHYRE_STOCK = register("shyre_stock", registrar -> registrar.basePlantOld());//}, () -> new BidirectionalStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setBottomHatBlock(AoABlocks.SHYRE_CAP_DOWN).setHatBlock(AoABlocks.SHYRE_CAP), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> SHYRE_CAP = register("shyre_cap", registrar -> registrar.basePlantOld());//}, () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.SHYRE_STOCK), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> SHYRE_CAP_DOWN = register("shyre_cap_down", registrar -> registrar.basePlantOld());//}, () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.SHYRE_STOCK), () -> AoACreativeModeTabs.GENERATION_BLOCKS);
	public static final DeferredBlock<Block> VOX_FUNGI_STEM = register("vox_fungi_stem", registrar -> registrar.basePlantOld());//}, registrar -> registrar.basePlant().factory(properties -> new StackablePlant(properties).setHatBlock(VOX_FUNGI)));
	public static final DeferredBlock<Block> VOX_FUNGI = register("vox_fungi", registrar -> registrar.basePlantOld());//}, registrar -> registrar.basePlant().factory(properties -> new StackablePlant(properties).setStemBlock(VOX_FUNGI_STEM)));
	public static final DeferredBlock<StackablePlant> VOX_TENTACLES_STEM = register("vox_tentacles_stem", registrar -> registrar.basePlantOld());//}, registrar -> registrar.basePlant(null));
	public static final DeferredBlock<Block> VOX_TENTACLES = register("vox_tentacles", registrar -> registrar.basePlantOld());//}, registrar -> registrar.basePlant(VOX_TENTACLES_STEM));

	public static final DeferredBlock<Block> CREEP_VINES = register("creep_vines", registrar -> registrar.noClip().mapColour(MapColor.PLANT).replaceable().randomTicks().stats(0.2f).flammable().pistonBreaks().generationBlocksTab().factory(VinesBlock::new));

	public static final DeferredBlock<Block> ASHFERN_CROP = register("ashfern_crop", registrar -> registrar.baseCrop().factory(properties -> new AshfernCropBlock(properties, AoAItems.ASHFERN_SEEDS)));
	public static final DeferredBlock<Block> BUBBLE_BERRY_CROP = register("bubble_berry_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.BUBBLE_BERRY_SEEDS)));
	public static final DeferredBlock<Block> CHILLI_CROP = register("chilli_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.CHILLI_SEEDS)));
	public static final DeferredBlock<Block> EYE_BULB_CROP = register("eye_bulb_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.EYE_BULB)));
	public static final DeferredBlock<Block> FLORACLES_CROP = register("floracles_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.FLORACLE_SEEDS)));
	public static final DeferredBlock<Block> GOLDICAPS_CROP = register("goldicaps_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.GOLDICAP_SEEDS)));
	public static final DeferredBlock<Block> HEART_FRUIT_CROP = register("heart_fruit_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.HEART_FRUIT_SEEDS)));
	public static final DeferredBlock<Block> LUNACRIKE_CROP = register("lunacrike_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.LUNACRIKE_SEEDS)));
	public static final DeferredBlock<Block> LUNA_GLOBE_CROP = register("luna_globe_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.LUNA_GLOBE_SEEDS)));
	public static final DeferredBlock<Block> LUNALON_CROP = register("lunalon_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.LUNALON_SEEDS)));
	public static final DeferredBlock<Block> MAGIC_MARANG_CROP = register("magic_marang_crop", registrar -> registrar.baseCrop().factory(properties -> new MagicMarangCrop(properties, AoAItems.MAGIC_MARANG)));
	public static final DeferredBlock<Block> MYSTIC_SHROOM_CROP = register("mystic_shroom_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.MYSTIC_SHROOMS)));
	public static final DeferredBlock<Block> ROSIDON_CROP = register("rosidon_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.ROSIDON_SEEDS)));
	public static final DeferredBlock<Block> TEA_CROP = register("tea_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.TEA_SEEDS)));
	public static final DeferredBlock<Block> TRILLIAD_CROP = register("trilliad_crop", registrar -> registrar.baseCrop().factory(properties -> new AoACropBlock(properties, AoAItems.TRILLIAD_SEEDS)));
	public static final DeferredBlock<Block> GREEN_MANURE = register("green_manure", registrar -> registrar.baseCrop().factory(GreenManure::new));

	public static final DeferredBlock<Block> THORNY_PLANT_CROP = register("thorny_plant_crop", registrar -> registrar.baseCrop().factory(properties -> new ThornyPlantCrop(properties, AoAItems.THORNY_PLANT_SEEDS)));
	public static final DeferredBlock<Block> LIVING_GROWTH = register("living_growth", registrar -> registrar.noItem().noClip().pistonBreaks().neverSolid().mapColour(MapColor.COLOR_GREEN).stats(1, 0).factory(LivingGrowth::new));

	public static final DeferredBlock<Block> TROPHY = register("trophy", registrar -> registrar.stopsPistons().utilityBlocksTab().stats(10f, 2000f).mapColour(MapColor.STONE).factory(TrophyBlock::new));
	public static final DeferredBlock<Block> GOLD_TROPHY = register("gold_trophy", registrar -> registrar.stopsPistons().utilityBlocksTab().stats(10f, 2000f).mapColour(MapColor.GOLD).itemProperties(properties -> properties.rarity(Rarity.RARE)).factory(GoldTrophyBlock::new));
	public static final DeferredBlock<Block> ORNATE_TROPHY = register("ornate_trophy", registrar -> registrar.stopsPistons().utilityBlocksTab().stats(10f, 2000f).mapColour(MapColor.DIAMOND).itemProperties(properties -> properties.rarity(Rarity.EPIC)).factory(OrnateTrophyBlock::new));
	
	public static final BannerBlockGroup ANCIENT_BANNER = registerGroup("ancient_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup BARON_BANNER = registerGroup("baron_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup BOREIC_BANNER = registerGroup("boreic_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup CANDY_BANNER = registerGroup("candy_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup CLOWN_BANNER = registerGroup("clown_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup CREEPY_BANNER = registerGroup("creepy_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup CRYSTAL_BANNER = registerGroup("crystal_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup DEEP_BANNER = registerGroup("deep_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup DUSTOPIAN_BANNER = registerGroup("dustopian_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup ENERGY_BANNER = registerGroup("energy_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup FUNGAL_BANNER = registerGroup("fungal_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup HAUNTED_BANNER = registerGroup("haunted_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup LELYETIAN_BANNER = registerGroup("lelyetian_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup LOTTO_BANNER = registerGroup("lotto_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup LUNAR_BANNER = registerGroup("lunar_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup MECHA_BANNER = registerGroup("mecha_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup NETHER_BANNER = registerGroup("nether_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup RAGE_BANNER = registerGroup("rage_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup ROSIDIAN_BANNER = registerGroup("rosidian_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup RUNIC_BANNER = registerGroup("runic_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup SHADOW_BANNER = registerGroup("shadow_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup SHYRE_BANNER = registerGroup("shyre_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup SPIRIT_BANNER = registerGroup("spirit_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup UTOPIAN_BANNER = registerGroup("utopian_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup VOID_BANNER = registerGroup("void_banner", BannerBlockGroup::new, BlockRegistrar::banner);
	public static final BannerBlockGroup VOX_BANNER = registerGroup("vox_banner", BannerBlockGroup::new, BlockRegistrar::banner);

	public static final DeferredBlock<Block> BANNER_EXTENSION = register("banner_extension", registrar -> registrar.factory(BannerExtension::new).mapColour(MapColor.METAL).stats(0.5f, 1).pistonBreaks().noClip().sounds(SoundType.WOOL).noOcclusion().noItem());

	private static <T extends Block> DeferredBlock<T> register(String id, Consumer<BlockRegistrar<T>> registrar) {
		final BlockRegistrar<T> blockRegistrar = new BlockRegistrar<>();
		final DeferredBlock<T> registryObject = AoARegistries.BLOCKS.register(id, () -> blockRegistrar.doCallbacks(blockRegistrar.build(registrar)));

		blockRegistrar.setRegistryObject(registryObject);

		return registryObject;
	}

	private static <G, T extends Block> G registerGroup(String baseId, TriFunction<String, BlockRegistrarFactory, Consumer<BlockRegistrar<T>>, G> factory, Consumer<BlockRegistrar<T>> baseBlockRegistrar) {
		return factory.apply(baseId, AoABlocks::register, baseBlockRegistrar);
	}

	public static void registeredLiquid(DeferredHolder<Block, ? extends LiquidBlock> liquid) {
		REGISTERED_LIQUIDS.add(liquid);
	}

	public static List<LiquidBlock> getRegisteredLiquidsForRenderTypes() {
		final List<LiquidBlock> liquids = new ObjectArrayList<>(REGISTERED_LIQUIDS.size());

		REGISTERED_LIQUIDS.forEach(obj -> liquids.add(obj.get()));
		REGISTERED_LIQUIDS.clear();

		return liquids;
	}
}
